// Code generated by go.m8.ru/cef, DO NOT EDIT.

package cef

import "net"

type extensionFields struct {
	// Action taken by the device.
	act string
	// Application level protocol, example: HTTP, HTTPS, SSHv2, Telnet, POP, IMPA, IMAPS, and so on.
	app string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a1 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a1Label string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a3 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a3Label string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a4 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a4Label string
	// Represents the category assigned by the originating device. Devices often use their own categorization schema to classify event. Example: “/Monitor/Disk/Read”
	cat string
	// One of our floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp1 float32
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp1Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp2 float32
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp2Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp3 float32
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp3Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp4 float32
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp4Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn1 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cn1Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn2 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field. Implementing ArcSight Common Event Format (CEF) - Version 26 ArcS
	cn2Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn3 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cn3Label string
	// A count associated with this event. How many times was this same event observed? Count can be omitted if it is 1.
	cnt int
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
	cs1 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs1Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	cs2 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
	cs2Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	cs3 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs3Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
	cs4 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs4Label string
	// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	cs5 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
	cs5Label string
	// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	cs6 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs6Label string
	// The DNS domain part of the complete fully qualified domain name (FQDN).
	destinationDnsDomain string
	// The service targeted by this event. Example: “sshd”
	destinationServiceName string
	// Identifies the translated destination that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	destinationTranslatedAddress net.IP
	// Port after it was translated; for example, a firewall. Valid port numbers are 0 to 65535
	destinationTranslatedPort int
	// One of two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	deviceCustomDate1 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	deviceCustomDate1Label string
	// One of the two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions
	deviceCustomDate2 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	deviceCustomDate2Label string
	// Any information about what direction the observed communication has taken. The following values are supported: “0” for inbound or “1” for outbound
	deviceDirection int
	// The DNS domain part of the complete fully qualified domain name (FQDN).
	deviceDnsDomain string
	// A name that uniquely identifies the device generating this event.
	deviceExternalID string
	// The facility generating this event. For example, Syslog has an explicit facility associated with every event.
	deviceFacility string
	// Interface on which the packet or data entered the device.
	deviceInboundInterface string
	// The Windows domain name of the device address.
	deviceNtDomain string
	// Interface on which the packet or data left the device
	deviceOutboundInterface string
	// Unique identifier for the payload associated with the event.
	devicePayloadID string
	// Process name associated with the event. An example might be the process generating the syslog entry in UNIX.
	deviceProcessName string
	// Identifies the translated device address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	deviceTranslatedAddress net.IP
	// Identifies the destination that an event refers to in an IP network. The format must be a fully qualified domain name (FQDN) associated with the destination node, when a node is available. Examples: “host.domain.com” or “host”.
	dhost string
	// The Windows domain name of the destination address.
	dntdom string
	// Provides the ID of the destination process associated with the event. For example, if an event contains process ID 105, “105” is the process ID
	dpid int
	// The typical values are “Administrator”, “User”, and “Guest”. This identifies the destination user’s privileges. In UNIX, for example, activity executed on the root user would be identified with destinationUser Privileges of “Administrator”.
	dpriv string
	// The name of the event’s destination process. Example: “telnetd” or “sshd”.
	dproc string
	// The valid port numbers are between 0 and 65535.
	dpt int
	// Identifies the destination address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	dst net.IP
	// The timezone for the device generating the event.
	dtz string
	// Identifies the destination user by ID. For example, in UNIX, the root user is generally associated with user ID 0
	duid string
	// Identifies the destination user by name. This is the user associated with the event’s destination. Email addresses are often mapped into the UserName fields. The recipient is a candidate to put into this field.
	duser string
	// Identifies the device address that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
	dvc net.IP
	// The format should be a fully qualified domain name (FQDN) associated with the device node, when a node is available. Example: “host.domain.com” or “host”.
	dvchost string
	// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
	dvcmac net.HardwareAddr
	// Provides the ID of the process on the device generating the event.
	dvcpid int
	// The time at which the activity related to the event ended. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st1970). An example would be reporting the end of a session.
	end string
	// The ID used by an originating device. They are usually increasing numbers, associated with events.
	externalID string
	// Time when the file was created.
	fileCreateTime string
	// Hash of a file.
	fileHash string
	// An ID associated with a file could be the inode.
	fileID string
	// Time when the file was last modified.
	fileModificationTime string
	// Full path to the file, including file name itself. Example: C:\Program Files \WindowsNT\Access ories\ wordpad.exe or /usr/bin/zip
	filePath string
	// Permissions of the file.
	filePermission string
	// Type of file (pipe, socket, etc.)
	fileType string
	// A timestamp field available to map a timestamp that does not apply to any other defined timestamp field in this dictionary. Use all flex fields sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
	flexDate1 string
	// The label field is a string and describes the purpose of the flex field.
	flexDate1Label string
	// One of four floating point fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
	flexString1 string
	// The label field is a string and describes the purpose of the flex field
	flexString1Label string
	// One of four floating point fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
	flexString2 string
	// The label field is a string and describes the purpose of the flex field.
	flexString2Label string
	// Name of the file only (without its path).
	fname string
	// Size of the file.
	fsize int64
	// Number of bytes transferred inbound, relative to the source to destination relationship, meaning that data was flowing from source to destination.
	in int64
	// An arbitrary message giving more details about the event. Multi-line entries can be produced by using \n as the new line separator.
	msg string
	// Time when old file was created.
	oldFileCreateTime string
	// Hash of the old file
	oldFileHash string
	// An ID associated with the old file could be the inode.
	oldFileID string
	// Time when old file was last modified.
	oldFileModificationTime string
	// Name of the old file.
	oldFileName string
	// Full path to the old file, including the file name itself. Examples: c:\Program Files\ WindowsNT\Accesso ries \wordpad.exe or /usr/bin/zip
	oldFilePath string
	// Permissions of the old file.
	oldFilePermission string
	// Size of the old file.
	oldFileSize int64
	// Type of the old file (pipe, socket, etc.)
	oldFileType string
	// Number of bytes transferred outbound relative to the source to destination relationship. For example, the byte number of data flowing from the destination to the source.
	out int
	// Displays the outcome, usually as ‘success’ or ‘failure’.
	outcome string
	// Identifies the Layer-4 protocol used. The possible values are protocols such as TCP or UDP
	proto string
	// The reason an audit event was generated. For example “badd password” or “unknown user”. This could also be an error or return code. Example: “0x1234”
	reason string
	// In the case of an HTTP request, this field contains the URL accessed. The URL should contain the protocol as well. Example: “http://www/secure. com”
	request string
	// The User-Agent associated with the request.
	requestClientApplication string
	// Description of the content from which the request originated (for example, HTTP Referrer)
	requestContext string
	// Cookies associated with the request.
	requestCookies string
	// The method used to access a URL. Possible values: “POST”, “GET”, etc.
	requestMethod string
	// The time at which the event related to the activity was received. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st 1970)
	rt string
	// Identifies the source that an event refers to in an IP network. The format should be a fully qualified domain name (FQDN) associated with the source node, when a mode is available. Examples: “host” or “host.domain.com”.
	shost string
	// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
	smac net.HardwareAddr
	// The Windows domain name for the source address.
	sntdom string
	// The DNS domain part of the complete fully qualified domain name (FQDN).
	sourceDnsDomain string
	// The service that is responsible for generating this event.
	sourceServiceName string
	// Identifies the translated source that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
	sourceTranslatedAddress net.IP
	// A port number after being translated by, for example, a firewall. Valid port numbers are 0 to 65535.
	sourceTranslatedPort int
	// The ID of the source process associated with the event
	spid int
	// The typical values are “Administrator”, “User”, and “Guest”. It identifies the source user’s privileges. In UNIX, for example, activity executed by the root user would be identified with “Administrator”.
	spriv string
	// The name of the event’s source process.
	sproc string
	// The valid port numbers are 0 to 65535.
	spt int
	// Identifies the source that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
	src net.IP
	// The time when the activity the event referred to started. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st 1970)
	start string
	// Identifies the source user by ID. This is the user associated with the source of the event. For example, in UNIX, the root user is generally associated with user ID 0.
	suid string
	// Identifies the source user by name. Email addresses are also mapped into the UserName fields. The sender is a candidate to put into this field.
	suser string
	// 0 means base event, 1 means aggregated, 2 means correlation, and 3 means action. This field can be omitted for base events (type 0)
	typ int
	// The DNS domain name of the ArcSight connector that processed the event.
	agentDnsDomain string
	agentNtDomain string
	agentTranslatedAddress net.IP
	agentTranslatedZoneExternalID string
	agentTranslatedZoneURI string
	agentZoneExternalID string
	agentZoneURI string
	// The IP address of the ArcSight connector that processed the event.
	agt net.IP
	// The hostname of the ArcSight connector that processed the event.
	ahost string
	// The agent ID of the ArcSight connector that processed the event.
	aid string
	// The MAC address of the ArcSight connector that processed the event.
	amac net.HardwareAddr
	// The time at which information about the event was received by the ArcSight connector.
	art string
	// The agent type of the ArcSight connector that processed the event
	at string
	// The agent time zone of the ArcSight connector that processed the event.
	atz string
	// The version of the ArcSight connector that processed the event.
	av string
	customerExternalID string
	customerURI string
	destinatioTranslatedZoneExternalID string
	// The URI for the Translated Zone that the destination asset has been assigned to in ArcSight.
	destinationTranslatedZoneURI string
	destinationZoneExternalID string
	// The URI for the Zone that the destination asset has been assigned to in ArcSight.
	destinationZoneURI string
	deviceTranslatedZoneExternalID string
	// The URI for the Translated Zone that the device asset has been assigned to in ArcSight.
	deviceTranslatedZoneURI string
	deviceZoneExternalID string
	// Thee URI for the Zone that the device asset has been assigned to in ArcSight.
	deviceZoneURI string
	// The latitudinal value from which the destination’s IP address belongs.
	dlat float64
	// The longitudinal value from which the destination’s IP address belongs.
	dlong float64
	// This is a unique ID that ArcSight assigns to each event.
	eventID int64
	rawEvent string
	slat float64
	slong float64
	sourceTranslatedZoneExternalID string
	// The URI for the Translated Zone that the destination asset has been assigned to in ArcSight.
	sourceTranslatedZoneURI string
	sourceZoneExternalID string
	// The URI for the Zone that the source asset has been assigned to in ArcSight.
	sourceZoneURI string
	// ID of an agentTranslatedZone resource reference.
	agentTranslatedZoneKey int64
	// ID of an agentZone resource reference.
	agentZoneKey int64
	// ID of a customer resource reference.
	customerKey int64
	// ID of a destinationTranslate dZone resource reference.
	destinationTranslatedZoneKey int64
	// ID of a destinationZone resource reference.
	dZoneKey int64
	// ID of a deviceTranslatedZone resource reference.
	deviceTranslatedZoneKey int64
	// ID of a deviceZone resource reference.
	deviceZoneKey int64
	// ID of a sourceTranslatedZon e resource reference.
	sTranslatedZoneKey int64
	// ID of a sourceZone resource reference
	sZoneKey int64
}

func (f *extensionFields) SetAct(v string) *extensionFields {
	if len(v) > 63 {
		v = v[:63]
	}

	f.act = v

	return f
}

func (f *extensionFields) SetApp(v string) *extensionFields {
	if len(v) > 31 {
		v = v[:31]
	}

	f.app = v

	return f
}

func (f *extensionFields) SetC6a1(v net.IP) *extensionFields {
	f.c6a1 = v

	return f
}

func (f *extensionFields) SetC6a1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.c6a1Label = v

	return f
}

func (f *extensionFields) SetC6a3(v net.IP) *extensionFields {
	f.c6a3 = v

	return f
}

func (f *extensionFields) SetC6a3Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.c6a3Label = v

	return f
}

func (f *extensionFields) SetC6a4(v net.IP) *extensionFields {
	f.c6a4 = v

	return f
}

func (f *extensionFields) SetC6a4Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.c6a4Label = v

	return f
}

func (f *extensionFields) SetCat(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cat = v

	return f
}

func (f *extensionFields) SetCfp1(v float32) *extensionFields {
	f.cfp1 = v

	return f
}

func (f *extensionFields) SetCfp1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cfp1Label = v

	return f
}

func (f *extensionFields) SetCfp2(v float32) *extensionFields {
	f.cfp2 = v

	return f
}

func (f *extensionFields) SetCfp2Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cfp2Label = v

	return f
}

func (f *extensionFields) SetCfp3(v float32) *extensionFields {
	f.cfp3 = v

	return f
}

func (f *extensionFields) SetCfp3Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cfp3Label = v

	return f
}

func (f *extensionFields) SetCfp4(v float32) *extensionFields {
	f.cfp4 = v

	return f
}

func (f *extensionFields) SetCfp4Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cfp4Label = v

	return f
}

func (f *extensionFields) SetCn1(v int64) *extensionFields {
	f.cn1 = v

	return f
}

func (f *extensionFields) SetCn1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cn1Label = v

	return f
}

func (f *extensionFields) SetCn2(v int64) *extensionFields {
	f.cn2 = v

	return f
}

func (f *extensionFields) SetCn2Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cn2Label = v

	return f
}

func (f *extensionFields) SetCn3(v int64) *extensionFields {
	f.cn3 = v

	return f
}

func (f *extensionFields) SetCn3Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cn3Label = v

	return f
}

func (f *extensionFields) SetCnt(v int) *extensionFields {
	f.cnt = v

	return f
}

func (f *extensionFields) SetCs1(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs1 = v

	return f
}

func (f *extensionFields) SetCs1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs1Label = v

	return f
}

func (f *extensionFields) SetCs2(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs2 = v

	return f
}

func (f *extensionFields) SetCs2Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs2Label = v

	return f
}

func (f *extensionFields) SetCs3(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs3 = v

	return f
}

func (f *extensionFields) SetCs3Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs3Label = v

	return f
}

func (f *extensionFields) SetCs4(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs4 = v

	return f
}

func (f *extensionFields) SetCs4Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs4Label = v

	return f
}

func (f *extensionFields) SetCs5(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs5 = v

	return f
}

func (f *extensionFields) SetCs5Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs5Label = v

	return f
}

func (f *extensionFields) SetCs6(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs6 = v

	return f
}

func (f *extensionFields) SetCs6Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs6Label = v

	return f
}

func (f *extensionFields) SetDestinationDnsDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.destinationDnsDomain = v

	return f
}

func (f *extensionFields) SetDestinationServiceName(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.destinationServiceName = v

	return f
}

func (f *extensionFields) SetDestinationTranslatedAddress(v net.IP) *extensionFields {
	f.destinationTranslatedAddress = v

	return f
}

func (f *extensionFields) SetDestinationTranslatedPort(v int) *extensionFields {
	f.destinationTranslatedPort = v

	return f
}

func (f *extensionFields) SetDeviceCustomDate1(v string) *extensionFields {
	f.deviceCustomDate1 = v

	return f
}

func (f *extensionFields) SetDeviceCustomDate1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.deviceCustomDate1Label = v

	return f
}

func (f *extensionFields) SetDeviceCustomDate2(v string) *extensionFields {
	f.deviceCustomDate2 = v

	return f
}

func (f *extensionFields) SetDeviceCustomDate2Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.deviceCustomDate2Label = v

	return f
}

func (f *extensionFields) SetDeviceDirection(v int) *extensionFields {
	f.deviceDirection = v

	return f
}

func (f *extensionFields) SetDeviceDnsDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.deviceDnsDomain = v

	return f
}

func (f *extensionFields) SetDeviceExternalID(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.deviceExternalID = v

	return f
}

func (f *extensionFields) SetDeviceFacility(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.deviceFacility = v

	return f
}

func (f *extensionFields) SetDeviceInboundInterface(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.deviceInboundInterface = v

	return f
}

func (f *extensionFields) SetDeviceNtDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.deviceNtDomain = v

	return f
}

func (f *extensionFields) SetDeviceOutboundInterface(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.deviceOutboundInterface = v

	return f
}

func (f *extensionFields) SetDevicePayloadID(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.devicePayloadID = v

	return f
}

func (f *extensionFields) SetDeviceProcessName(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.deviceProcessName = v

	return f
}

func (f *extensionFields) SetDeviceTranslatedAddress(v net.IP) *extensionFields {
	f.deviceTranslatedAddress = v

	return f
}

func (f *extensionFields) SetDhost(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.dhost = v

	return f
}

func (f *extensionFields) SetDntdom(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.dntdom = v

	return f
}

func (f *extensionFields) SetDpid(v int) *extensionFields {
	f.dpid = v

	return f
}

func (f *extensionFields) SetDpriv(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.dpriv = v

	return f
}

func (f *extensionFields) SetDproc(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.dproc = v

	return f
}

func (f *extensionFields) SetDpt(v int) *extensionFields {
	f.dpt = v

	return f
}

func (f *extensionFields) SetDst(v net.IP) *extensionFields {
	f.dst = v

	return f
}

func (f *extensionFields) SetDtz(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.dtz = v

	return f
}

func (f *extensionFields) SetDuid(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.duid = v

	return f
}

func (f *extensionFields) SetDuser(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.duser = v

	return f
}

func (f *extensionFields) SetDvc(v net.IP) *extensionFields {
	f.dvc = v

	return f
}

func (f *extensionFields) SetDvchost(v string) *extensionFields {
	if len(v) > 100 {
		v = v[:100]
	}

	f.dvchost = v

	return f
}

func (f *extensionFields) SetDvcmac(v net.HardwareAddr) *extensionFields {
	f.dvcmac = v

	return f
}

func (f *extensionFields) SetDvcpid(v int) *extensionFields {
	f.dvcpid = v

	return f
}

func (f *extensionFields) SetEnd(v string) *extensionFields {
	f.end = v

	return f
}

func (f *extensionFields) SetExternalID(v string) *extensionFields {
	if len(v) > 40 {
		v = v[:40]
	}

	f.externalID = v

	return f
}

func (f *extensionFields) SetFileCreateTime(v string) *extensionFields {
	f.fileCreateTime = v

	return f
}

func (f *extensionFields) SetFileHash(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.fileHash = v

	return f
}

func (f *extensionFields) SetFileID(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.fileID = v

	return f
}

func (f *extensionFields) SetFileModificationTime(v string) *extensionFields {
	f.fileModificationTime = v

	return f
}

func (f *extensionFields) SetFilePath(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.filePath = v

	return f
}

func (f *extensionFields) SetFilePermission(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.filePermission = v

	return f
}

func (f *extensionFields) SetFileType(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.fileType = v

	return f
}

func (f *extensionFields) SetFlexDate1(v string) *extensionFields {
	f.flexDate1 = v

	return f
}

func (f *extensionFields) SetFlexDate1Label(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.flexDate1Label = v

	return f
}

func (f *extensionFields) SetFlexString1(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.flexString1 = v

	return f
}

func (f *extensionFields) SetFlexString1Label(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.flexString1Label = v

	return f
}

func (f *extensionFields) SetFlexString2(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.flexString2 = v

	return f
}

func (f *extensionFields) SetFlexString2Label(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.flexString2Label = v

	return f
}

func (f *extensionFields) SetFname(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.fname = v

	return f
}

func (f *extensionFields) SetFsize(v int64) *extensionFields {
	f.fsize = v

	return f
}

func (f *extensionFields) SetIn(v int64) *extensionFields {
	f.in = v

	return f
}

func (f *extensionFields) SetMsg(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.msg = v

	return f
}

func (f *extensionFields) SetOldFileCreateTime(v string) *extensionFields {
	f.oldFileCreateTime = v

	return f
}

func (f *extensionFields) SetOldFileHash(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.oldFileHash = v

	return f
}

func (f *extensionFields) SetOldFileID(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.oldFileID = v

	return f
}

func (f *extensionFields) SetOldFileModificationTime(v string) *extensionFields {
	f.oldFileModificationTime = v

	return f
}

func (f *extensionFields) SetOldFileName(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.oldFileName = v

	return f
}

func (f *extensionFields) SetOldFilePath(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.oldFilePath = v

	return f
}

func (f *extensionFields) SetOldFilePermission(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.oldFilePermission = v

	return f
}

func (f *extensionFields) SetOldFileSize(v int64) *extensionFields {
	f.oldFileSize = v

	return f
}

func (f *extensionFields) SetOldFileType(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.oldFileType = v

	return f
}

func (f *extensionFields) SetOut(v int) *extensionFields {
	f.out = v

	return f
}

func (f *extensionFields) SetOutcome(v string) *extensionFields {
	if len(v) > 63 {
		v = v[:63]
	}

	f.outcome = v

	return f
}

func (f *extensionFields) SetProto(v string) *extensionFields {
	if len(v) > 31 {
		v = v[:31]
	}

	f.proto = v

	return f
}

func (f *extensionFields) SetReason(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.reason = v

	return f
}

func (f *extensionFields) SetRequest(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.request = v

	return f
}

func (f *extensionFields) SetRequestClientApplication(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.requestClientApplication = v

	return f
}

func (f *extensionFields) SetRequestContext(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.requestContext = v

	return f
}

func (f *extensionFields) SetRequestCookies(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.requestCookies = v

	return f
}

func (f *extensionFields) SetRequestMethod(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.requestMethod = v

	return f
}

func (f *extensionFields) SetRt(v string) *extensionFields {
	f.rt = v

	return f
}

func (f *extensionFields) SetShost(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.shost = v

	return f
}

func (f *extensionFields) SetSmac(v net.HardwareAddr) *extensionFields {
	f.smac = v

	return f
}

func (f *extensionFields) SetSntdom(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.sntdom = v

	return f
}

func (f *extensionFields) SetSourceDnsDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.sourceDnsDomain = v

	return f
}

func (f *extensionFields) SetSourceServiceName(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.sourceServiceName = v

	return f
}

func (f *extensionFields) SetSourceTranslatedAddress(v net.IP) *extensionFields {
	f.sourceTranslatedAddress = v

	return f
}

func (f *extensionFields) SetSourceTranslatedPort(v int) *extensionFields {
	f.sourceTranslatedPort = v

	return f
}

func (f *extensionFields) SetSpid(v int) *extensionFields {
	f.spid = v

	return f
}

func (f *extensionFields) SetSpriv(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.spriv = v

	return f
}

func (f *extensionFields) SetSproc(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.sproc = v

	return f
}

func (f *extensionFields) SetSpt(v int) *extensionFields {
	f.spt = v

	return f
}

func (f *extensionFields) SetSrc(v net.IP) *extensionFields {
	f.src = v

	return f
}

func (f *extensionFields) SetStart(v string) *extensionFields {
	f.start = v

	return f
}

func (f *extensionFields) SetSuid(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.suid = v

	return f
}

func (f *extensionFields) SetSuser(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.suser = v

	return f
}

func (f *extensionFields) SetType(v int) *extensionFields {
	f.typ = v

	return f
}

func (f *extensionFields) SetAgentDnsDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.agentDnsDomain = v

	return f
}

func (f *extensionFields) SetAgentNtDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.agentNtDomain = v

	return f
}

func (f *extensionFields) SetAgentTranslatedAddress(v net.IP) *extensionFields {
	f.agentTranslatedAddress = v

	return f
}

func (f *extensionFields) SetAgentTranslatedZoneExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.agentTranslatedZoneExternalID = v

	return f
}

func (f *extensionFields) SetAgentTranslatedZoneURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.agentTranslatedZoneURI = v

	return f
}

func (f *extensionFields) SetAgentZoneExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.agentZoneExternalID = v

	return f
}

func (f *extensionFields) SetAgentZoneURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.agentZoneURI = v

	return f
}

func (f *extensionFields) SetAgt(v net.IP) *extensionFields {
	f.agt = v

	return f
}

func (f *extensionFields) SetAhost(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.ahost = v

	return f
}

func (f *extensionFields) SetAid(v string) *extensionFields {
	if len(v) > 40 {
		v = v[:40]
	}

	f.aid = v

	return f
}

func (f *extensionFields) SetAmac(v net.HardwareAddr) *extensionFields {
	f.amac = v

	return f
}

func (f *extensionFields) SetArt(v string) *extensionFields {
	f.art = v

	return f
}

func (f *extensionFields) SetAt(v string) *extensionFields {
	if len(v) > 63 {
		v = v[:63]
	}

	f.at = v

	return f
}

func (f *extensionFields) SetAtz(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.atz = v

	return f
}

func (f *extensionFields) SetAv(v string) *extensionFields {
	if len(v) > 31 {
		v = v[:31]
	}

	f.av = v

	return f
}

func (f *extensionFields) SetCustomerExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.customerExternalID = v

	return f
}

func (f *extensionFields) SetCustomerURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.customerURI = v

	return f
}

func (f *extensionFields) SetDestinatioTranslatedZoneExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.destinatioTranslatedZoneExternalID = v

	return f
}

func (f *extensionFields) SetDestinationTranslatedZoneURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.destinationTranslatedZoneURI = v

	return f
}

func (f *extensionFields) SetDestinationZoneExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.destinationZoneExternalID = v

	return f
}

func (f *extensionFields) SetDestinationZoneURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.destinationZoneURI = v

	return f
}

func (f *extensionFields) SetDeviceTranslatedZoneExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.deviceTranslatedZoneExternalID = v

	return f
}

func (f *extensionFields) SetDeviceTranslatedZoneURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.deviceTranslatedZoneURI = v

	return f
}

func (f *extensionFields) SetDeviceZoneExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.deviceZoneExternalID = v

	return f
}

func (f *extensionFields) SetDeviceZoneURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.deviceZoneURI = v

	return f
}

func (f *extensionFields) SetDlat(v float64) *extensionFields {
	f.dlat = v

	return f
}

func (f *extensionFields) SetDlong(v float64) *extensionFields {
	f.dlong = v

	return f
}

func (f *extensionFields) SetEventID(v int64) *extensionFields {
	f.eventID = v

	return f
}

func (f *extensionFields) SetRawEvent(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.rawEvent = v

	return f
}

func (f *extensionFields) SetSlat(v float64) *extensionFields {
	f.slat = v

	return f
}

func (f *extensionFields) SetSlong(v float64) *extensionFields {
	f.slong = v

	return f
}

func (f *extensionFields) SetSourceTranslatedZoneExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.sourceTranslatedZoneExternalID = v

	return f
}

func (f *extensionFields) SetSourceTranslatedZoneURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.sourceTranslatedZoneURI = v

	return f
}

func (f *extensionFields) SetSourceZoneExternalID(v string) *extensionFields {
	if len(v) > 200 {
		v = v[:200]
	}

	f.sourceZoneExternalID = v

	return f
}

func (f *extensionFields) SetSourceZoneURI(v string) *extensionFields {
	if len(v) > 2048 {
		v = v[:2048]
	}

	f.sourceZoneURI = v

	return f
}

func (f *extensionFields) SetAgentTranslatedZoneKey(v int64) *extensionFields {
	f.agentTranslatedZoneKey = v

	return f
}

func (f *extensionFields) SetAgentZoneKey(v int64) *extensionFields {
	f.agentZoneKey = v

	return f
}

func (f *extensionFields) SetCustomerKey(v int64) *extensionFields {
	f.customerKey = v

	return f
}

func (f *extensionFields) SetDestinationTranslatedZoneKey(v int64) *extensionFields {
	f.destinationTranslatedZoneKey = v

	return f
}

func (f *extensionFields) SetDZoneKey(v int64) *extensionFields {
	f.dZoneKey = v

	return f
}

func (f *extensionFields) SetDeviceTranslatedZoneKey(v int64) *extensionFields {
	f.deviceTranslatedZoneKey = v

	return f
}

func (f *extensionFields) SetDeviceZoneKey(v int64) *extensionFields {
	f.deviceZoneKey = v

	return f
}

func (f *extensionFields) SetSTranslatedZoneKey(v int64) *extensionFields {
	f.sTranslatedZoneKey = v

	return f
}

func (f *extensionFields) SetSZoneKey(v int64) *extensionFields {
	f.sZoneKey = v

	return f
}

// Action taken by the device.
func (f *extensionFields) Act() string {
	return f.act
}

// Application level protocol, example: HTTP, HTTPS, SSHv2, Telnet, POP, IMPA, IMAPS, and so on.
func (f *extensionFields) App() string {
	return f.app
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) C6a1() net.IP {
	return f.c6a1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) C6a1Label() string {
	return f.c6a1Label
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) C6a3() net.IP {
	return f.c6a3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) C6a3Label() string {
	return f.c6a3Label
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) C6a4() net.IP {
	return f.c6a4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) C6a4Label() string {
	return f.c6a4Label
}

// Represents the category assigned by the originating device. Devices often use their own categorization schema to classify event. Example: “/Monitor/Disk/Read”
func (f *extensionFields) Cat() string {
	return f.cat
}

// One of our floating point fields available to map fields that do not apply to any other in this dictionary.
func (f *extensionFields) Cfp1() float32 {
	return f.cfp1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cfp1Label() string {
	return f.cfp1Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (f *extensionFields) Cfp2() float32 {
	return f.cfp2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cfp2Label() string {
	return f.cfp2Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (f *extensionFields) Cfp3() float32 {
	return f.cfp3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cfp3Label() string {
	return f.cfp3Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (f *extensionFields) Cfp4() float32 {
	return f.cfp4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cfp4Label() string {
	return f.cfp4Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (f *extensionFields) Cn1() int64 {
	return f.cn1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cn1Label() string {
	return f.cn1Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (f *extensionFields) Cn2() int64 {
	return f.cn2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field. Implementing ArcSight Common Event Format (CEF) - Version 26 ArcS
func (f *extensionFields) Cn2Label() string {
	return f.cn2Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (f *extensionFields) Cn3() int64 {
	return f.cn3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cn3Label() string {
	return f.cn3Label
}

// A count associated with this event. How many times was this same event observed? Count can be omitted if it is 1.
func (f *extensionFields) Cnt() int {
	return f.cnt
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
func (f *extensionFields) Cs1() string {
	return f.cs1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cs1Label() string {
	return f.cs1Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) Cs2() string {
	return f.cs2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
func (f *extensionFields) Cs2Label() string {
	return f.cs2Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) Cs3() string {
	return f.cs3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cs3Label() string {
	return f.cs3Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
func (f *extensionFields) Cs4() string {
	return f.cs4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cs4Label() string {
	return f.cs4Label
}

// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (f *extensionFields) Cs5() string {
	return f.cs5
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
func (f *extensionFields) Cs5Label() string {
	return f.cs5Label
}

// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (f *extensionFields) Cs6() string {
	return f.cs6
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cs6Label() string {
	return f.cs6Label
}

// The DNS domain part of the complete fully qualified domain name (FQDN).
func (f *extensionFields) DestinationDnsDomain() string {
	return f.destinationDnsDomain
}

// The service targeted by this event. Example: “sshd”
func (f *extensionFields) DestinationServiceName() string {
	return f.destinationServiceName
}

// Identifies the translated destination that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (f *extensionFields) DestinationTranslatedAddress() net.IP {
	return f.destinationTranslatedAddress
}

// Port after it was translated; for example, a firewall. Valid port numbers are 0 to 65535
func (f *extensionFields) DestinationTranslatedPort() int {
	return f.destinationTranslatedPort
}

// One of two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (f *extensionFields) DeviceCustomDate1() string {
	return f.deviceCustomDate1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) DeviceCustomDate1Label() string {
	return f.deviceCustomDate1Label
}

// One of the two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions
func (f *extensionFields) DeviceCustomDate2() string {
	return f.deviceCustomDate2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) DeviceCustomDate2Label() string {
	return f.deviceCustomDate2Label
}

// Any information about what direction the observed communication has taken. The following values are supported: “0” for inbound or “1” for outbound
func (f *extensionFields) DeviceDirection() int {
	return f.deviceDirection
}

// The DNS domain part of the complete fully qualified domain name (FQDN).
func (f *extensionFields) DeviceDnsDomain() string {
	return f.deviceDnsDomain
}

// A name that uniquely identifies the device generating this event.
func (f *extensionFields) DeviceExternalID() string {
	return f.deviceExternalID
}

// The facility generating this event. For example, Syslog has an explicit facility associated with every event.
func (f *extensionFields) DeviceFacility() string {
	return f.deviceFacility
}

// Interface on which the packet or data entered the device.
func (f *extensionFields) DeviceInboundInterface() string {
	return f.deviceInboundInterface
}

// The Windows domain name of the device address.
func (f *extensionFields) DeviceNtDomain() string {
	return f.deviceNtDomain
}

// Interface on which the packet or data left the device
func (f *extensionFields) DeviceOutboundInterface() string {
	return f.deviceOutboundInterface
}

// Unique identifier for the payload associated with the event.
func (f *extensionFields) DevicePayloadID() string {
	return f.devicePayloadID
}

// Process name associated with the event. An example might be the process generating the syslog entry in UNIX.
func (f *extensionFields) DeviceProcessName() string {
	return f.deviceProcessName
}

// Identifies the translated device address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (f *extensionFields) DeviceTranslatedAddress() net.IP {
	return f.deviceTranslatedAddress
}

// Identifies the destination that an event refers to in an IP network. The format must be a fully qualified domain name (FQDN) associated with the destination node, when a node is available. Examples: “host.domain.com” or “host”.
func (f *extensionFields) Dhost() string {
	return f.dhost
}

// The Windows domain name of the destination address.
func (f *extensionFields) Dntdom() string {
	return f.dntdom
}

// Provides the ID of the destination process associated with the event. For example, if an event contains process ID 105, “105” is the process ID
func (f *extensionFields) Dpid() int {
	return f.dpid
}

// The typical values are “Administrator”, “User”, and “Guest”. This identifies the destination user’s privileges. In UNIX, for example, activity executed on the root user would be identified with destinationUser Privileges of “Administrator”.
func (f *extensionFields) Dpriv() string {
	return f.dpriv
}

// The name of the event’s destination process. Example: “telnetd” or “sshd”.
func (f *extensionFields) Dproc() string {
	return f.dproc
}

// The valid port numbers are between 0 and 65535.
func (f *extensionFields) Dpt() int {
	return f.dpt
}

// Identifies the destination address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (f *extensionFields) Dst() net.IP {
	return f.dst
}

// The timezone for the device generating the event.
func (f *extensionFields) Dtz() string {
	return f.dtz
}

// Identifies the destination user by ID. For example, in UNIX, the root user is generally associated with user ID 0
func (f *extensionFields) Duid() string {
	return f.duid
}

// Identifies the destination user by name. This is the user associated with the event’s destination. Email addresses are often mapped into the UserName fields. The recipient is a candidate to put into this field.
func (f *extensionFields) Duser() string {
	return f.duser
}

// Identifies the device address that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
func (f *extensionFields) Dvc() net.IP {
	return f.dvc
}

// The format should be a fully qualified domain name (FQDN) associated with the device node, when a node is available. Example: “host.domain.com” or “host”.
func (f *extensionFields) Dvchost() string {
	return f.dvchost
}

// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
func (f *extensionFields) Dvcmac() net.HardwareAddr {
	return f.dvcmac
}

// Provides the ID of the process on the device generating the event.
func (f *extensionFields) Dvcpid() int {
	return f.dvcpid
}

// The time at which the activity related to the event ended. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st1970). An example would be reporting the end of a session.
func (f *extensionFields) End() string {
	return f.end
}

// The ID used by an originating device. They are usually increasing numbers, associated with events.
func (f *extensionFields) ExternalID() string {
	return f.externalID
}

// Time when the file was created.
func (f *extensionFields) FileCreateTime() string {
	return f.fileCreateTime
}

// Hash of a file.
func (f *extensionFields) FileHash() string {
	return f.fileHash
}

// An ID associated with a file could be the inode.
func (f *extensionFields) FileID() string {
	return f.fileID
}

// Time when the file was last modified.
func (f *extensionFields) FileModificationTime() string {
	return f.fileModificationTime
}

// Full path to the file, including file name itself. Example: C:\Program Files \WindowsNT\Access ories\ wordpad.exe or /usr/bin/zip
func (f *extensionFields) FilePath() string {
	return f.filePath
}

// Permissions of the file.
func (f *extensionFields) FilePermission() string {
	return f.filePermission
}

// Type of file (pipe, socket, etc.)
func (f *extensionFields) FileType() string {
	return f.fileType
}

// A timestamp field available to map a timestamp that does not apply to any other defined timestamp field in this dictionary. Use all flex fields sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
func (f *extensionFields) FlexDate1() string {
	return f.flexDate1
}

// The label field is a string and describes the purpose of the flex field.
func (f *extensionFields) FlexDate1Label() string {
	return f.flexDate1Label
}

// One of four floating point fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
func (f *extensionFields) FlexString1() string {
	return f.flexString1
}

// The label field is a string and describes the purpose of the flex field
func (f *extensionFields) FlexString1Label() string {
	return f.flexString1Label
}

// One of four floating point fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
func (f *extensionFields) FlexString2() string {
	return f.flexString2
}

// The label field is a string and describes the purpose of the flex field.
func (f *extensionFields) FlexString2Label() string {
	return f.flexString2Label
}

// Name of the file only (without its path).
func (f *extensionFields) Fname() string {
	return f.fname
}

// Size of the file.
func (f *extensionFields) Fsize() int64 {
	return f.fsize
}

// Number of bytes transferred inbound, relative to the source to destination relationship, meaning that data was flowing from source to destination.
func (f *extensionFields) In() int64 {
	return f.in
}

// An arbitrary message giving more details about the event. Multi-line entries can be produced by using \n as the new line separator.
func (f *extensionFields) Msg() string {
	return f.msg
}

// Time when old file was created.
func (f *extensionFields) OldFileCreateTime() string {
	return f.oldFileCreateTime
}

// Hash of the old file
func (f *extensionFields) OldFileHash() string {
	return f.oldFileHash
}

// An ID associated with the old file could be the inode.
func (f *extensionFields) OldFileID() string {
	return f.oldFileID
}

// Time when old file was last modified.
func (f *extensionFields) OldFileModificationTime() string {
	return f.oldFileModificationTime
}

// Name of the old file.
func (f *extensionFields) OldFileName() string {
	return f.oldFileName
}

// Full path to the old file, including the file name itself. Examples: c:\Program Files\ WindowsNT\Accesso ries \wordpad.exe or /usr/bin/zip
func (f *extensionFields) OldFilePath() string {
	return f.oldFilePath
}

// Permissions of the old file.
func (f *extensionFields) OldFilePermission() string {
	return f.oldFilePermission
}

// Size of the old file.
func (f *extensionFields) OldFileSize() int64 {
	return f.oldFileSize
}

// Type of the old file (pipe, socket, etc.)
func (f *extensionFields) OldFileType() string {
	return f.oldFileType
}

// Number of bytes transferred outbound relative to the source to destination relationship. For example, the byte number of data flowing from the destination to the source.
func (f *extensionFields) Out() int {
	return f.out
}

// Displays the outcome, usually as ‘success’ or ‘failure’.
func (f *extensionFields) Outcome() string {
	return f.outcome
}

// Identifies the Layer-4 protocol used. The possible values are protocols such as TCP or UDP
func (f *extensionFields) Proto() string {
	return f.proto
}

// The reason an audit event was generated. For example “badd password” or “unknown user”. This could also be an error or return code. Example: “0x1234”
func (f *extensionFields) Reason() string {
	return f.reason
}

// In the case of an HTTP request, this field contains the URL accessed. The URL should contain the protocol as well. Example: “http://www/secure. com”
func (f *extensionFields) Request() string {
	return f.request
}

// The User-Agent associated with the request.
func (f *extensionFields) RequestClientApplication() string {
	return f.requestClientApplication
}

// Description of the content from which the request originated (for example, HTTP Referrer)
func (f *extensionFields) RequestContext() string {
	return f.requestContext
}

// Cookies associated with the request.
func (f *extensionFields) RequestCookies() string {
	return f.requestCookies
}

// The method used to access a URL. Possible values: “POST”, “GET”, etc.
func (f *extensionFields) RequestMethod() string {
	return f.requestMethod
}

// The time at which the event related to the activity was received. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st 1970)
func (f *extensionFields) Rt() string {
	return f.rt
}

// Identifies the source that an event refers to in an IP network. The format should be a fully qualified domain name (FQDN) associated with the source node, when a mode is available. Examples: “host” or “host.domain.com”.
func (f *extensionFields) Shost() string {
	return f.shost
}

// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
func (f *extensionFields) Smac() net.HardwareAddr {
	return f.smac
}

// The Windows domain name for the source address.
func (f *extensionFields) Sntdom() string {
	return f.sntdom
}

// The DNS domain part of the complete fully qualified domain name (FQDN).
func (f *extensionFields) SourceDnsDomain() string {
	return f.sourceDnsDomain
}

// The service that is responsible for generating this event.
func (f *extensionFields) SourceServiceName() string {
	return f.sourceServiceName
}

// Identifies the translated source that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
func (f *extensionFields) SourceTranslatedAddress() net.IP {
	return f.sourceTranslatedAddress
}

// A port number after being translated by, for example, a firewall. Valid port numbers are 0 to 65535.
func (f *extensionFields) SourceTranslatedPort() int {
	return f.sourceTranslatedPort
}

// The ID of the source process associated with the event
func (f *extensionFields) Spid() int {
	return f.spid
}

// The typical values are “Administrator”, “User”, and “Guest”. It identifies the source user’s privileges. In UNIX, for example, activity executed by the root user would be identified with “Administrator”.
func (f *extensionFields) Spriv() string {
	return f.spriv
}

// The name of the event’s source process.
func (f *extensionFields) Sproc() string {
	return f.sproc
}

// The valid port numbers are 0 to 65535.
func (f *extensionFields) Spt() int {
	return f.spt
}

// Identifies the source that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
func (f *extensionFields) Src() net.IP {
	return f.src
}

// The time when the activity the event referred to started. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st 1970)
func (f *extensionFields) Start() string {
	return f.start
}

// Identifies the source user by ID. This is the user associated with the source of the event. For example, in UNIX, the root user is generally associated with user ID 0.
func (f *extensionFields) Suid() string {
	return f.suid
}

// Identifies the source user by name. Email addresses are also mapped into the UserName fields. The sender is a candidate to put into this field.
func (f *extensionFields) Suser() string {
	return f.suser
}

// 0 means base event, 1 means aggregated, 2 means correlation, and 3 means action. This field can be omitted for base events (type 0)
func (f *extensionFields) Type() int {
	return f.typ
}

// The DNS domain name of the ArcSight connector that processed the event.
func (f *extensionFields) AgentDnsDomain() string {
	return f.agentDnsDomain
}

func (f *extensionFields) AgentNtDomain() string {
	return f.agentNtDomain
}

func (f *extensionFields) AgentTranslatedAddress() net.IP {
	return f.agentTranslatedAddress
}

func (f *extensionFields) AgentTranslatedZoneExternalID() string {
	return f.agentTranslatedZoneExternalID
}

func (f *extensionFields) AgentTranslatedZoneURI() string {
	return f.agentTranslatedZoneURI
}

func (f *extensionFields) AgentZoneExternalID() string {
	return f.agentZoneExternalID
}

func (f *extensionFields) AgentZoneURI() string {
	return f.agentZoneURI
}

// The IP address of the ArcSight connector that processed the event.
func (f *extensionFields) Agt() net.IP {
	return f.agt
}

// The hostname of the ArcSight connector that processed the event.
func (f *extensionFields) Ahost() string {
	return f.ahost
}

// The agent ID of the ArcSight connector that processed the event.
func (f *extensionFields) Aid() string {
	return f.aid
}

// The MAC address of the ArcSight connector that processed the event.
func (f *extensionFields) Amac() net.HardwareAddr {
	return f.amac
}

// The time at which information about the event was received by the ArcSight connector.
func (f *extensionFields) Art() string {
	return f.art
}

// The agent type of the ArcSight connector that processed the event
func (f *extensionFields) At() string {
	return f.at
}

// The agent time zone of the ArcSight connector that processed the event.
func (f *extensionFields) Atz() string {
	return f.atz
}

// The version of the ArcSight connector that processed the event.
func (f *extensionFields) Av() string {
	return f.av
}

func (f *extensionFields) CustomerExternalID() string {
	return f.customerExternalID
}

func (f *extensionFields) CustomerURI() string {
	return f.customerURI
}

func (f *extensionFields) DestinatioTranslatedZoneExternalID() string {
	return f.destinatioTranslatedZoneExternalID
}

// The URI for the Translated Zone that the destination asset has been assigned to in ArcSight.
func (f *extensionFields) DestinationTranslatedZoneURI() string {
	return f.destinationTranslatedZoneURI
}

func (f *extensionFields) DestinationZoneExternalID() string {
	return f.destinationZoneExternalID
}

// The URI for the Zone that the destination asset has been assigned to in ArcSight.
func (f *extensionFields) DestinationZoneURI() string {
	return f.destinationZoneURI
}

func (f *extensionFields) DeviceTranslatedZoneExternalID() string {
	return f.deviceTranslatedZoneExternalID
}

// The URI for the Translated Zone that the device asset has been assigned to in ArcSight.
func (f *extensionFields) DeviceTranslatedZoneURI() string {
	return f.deviceTranslatedZoneURI
}

func (f *extensionFields) DeviceZoneExternalID() string {
	return f.deviceZoneExternalID
}

// Thee URI for the Zone that the device asset has been assigned to in ArcSight.
func (f *extensionFields) DeviceZoneURI() string {
	return f.deviceZoneURI
}

// The latitudinal value from which the destination’s IP address belongs.
func (f *extensionFields) Dlat() float64 {
	return f.dlat
}

// The longitudinal value from which the destination’s IP address belongs.
func (f *extensionFields) Dlong() float64 {
	return f.dlong
}

// This is a unique ID that ArcSight assigns to each event.
func (f *extensionFields) EventID() int64 {
	return f.eventID
}

func (f *extensionFields) RawEvent() string {
	return f.rawEvent
}

func (f *extensionFields) Slat() float64 {
	return f.slat
}

func (f *extensionFields) Slong() float64 {
	return f.slong
}

func (f *extensionFields) SourceTranslatedZoneExternalID() string {
	return f.sourceTranslatedZoneExternalID
}

// The URI for the Translated Zone that the destination asset has been assigned to in ArcSight.
func (f *extensionFields) SourceTranslatedZoneURI() string {
	return f.sourceTranslatedZoneURI
}

func (f *extensionFields) SourceZoneExternalID() string {
	return f.sourceZoneExternalID
}

// The URI for the Zone that the source asset has been assigned to in ArcSight.
func (f *extensionFields) SourceZoneURI() string {
	return f.sourceZoneURI
}

// ID of an agentTranslatedZone resource reference.
func (f *extensionFields) AgentTranslatedZoneKey() int64 {
	return f.agentTranslatedZoneKey
}

// ID of an agentZone resource reference.
func (f *extensionFields) AgentZoneKey() int64 {
	return f.agentZoneKey
}

// ID of a customer resource reference.
func (f *extensionFields) CustomerKey() int64 {
	return f.customerKey
}

// ID of a destinationTranslate dZone resource reference.
func (f *extensionFields) DestinationTranslatedZoneKey() int64 {
	return f.destinationTranslatedZoneKey
}

// ID of a destinationZone resource reference.
func (f *extensionFields) DZoneKey() int64 {
	return f.dZoneKey
}

// ID of a deviceTranslatedZone resource reference.
func (f *extensionFields) DeviceTranslatedZoneKey() int64 {
	return f.deviceTranslatedZoneKey
}

// ID of a deviceZone resource reference.
func (f *extensionFields) DeviceZoneKey() int64 {
	return f.deviceZoneKey
}

// ID of a sourceTranslatedZon e resource reference.
func (f *extensionFields) STranslatedZoneKey() int64 {
	return f.sTranslatedZoneKey
}

// ID of a sourceZone resource reference
func (f *extensionFields) SZoneKey() int64 {
	return f.sZoneKey
}
