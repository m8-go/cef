// Code generated by go.m8.ru/cef, DO NOT EDIT.

package cef

import "net"

type extensionFields struct {
	// Action taken by the device.
	act string
	// Application level protocol, example: HTTP, HTTPS, SSHv2, Telnet, POP, IMPA, IMAPS, and so on.
	app string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a1 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a1Label string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a3 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a3Label string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a4 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a4Label string
	// Represents the category assigned by the originating device. Devices often use their own categorization schema to classify event. Example: “/Monitor/Disk/Read”
	cat string
	// One of our floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp1 float64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp1Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp2 float64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp2Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp3 float64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp3Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp4 float64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp4Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn1 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cn1Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn2 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field. Implementing ArcSight Common Event Format (CEF) - Version 26 ArcS
	cn2Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn3 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cn3Label string
	// A count associated with this event. How many times was this same event observed? Count can be omitted if it is 1.
	cnt int
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
	cs1 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs1Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	cs2 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
	cs2Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	cs3 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs3Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
	cs4 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs4Label string
	// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	cs5 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
	cs5Label string
	// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	cs6 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs6Label string
	// The DNS domain part of the complete fully qualified domain name (FQDN).
	destinationDnsDomain string
	// The service targeted by this event. Example: “sshd”
	destinationServiceName string
	// Identifies the translated destination that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	destinationTranslatedAddress net.IP
	// Port after it was translated; for example, a firewall. Valid port numbers are 0 to 65535
	destinationTranslatedPort int
	// One of two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	deviceCustomDate1 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	deviceCustomDate1Label string
	// One of the two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions
	deviceCustomDate2 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	deviceCustomDate2Label string
	// Any information about what direction the observed communication has taken. The following values are supported: “0” for inbound or “1” for outbound
	deviceDirection int
	// The DNS domain part of the complete fully qualified domain name (FQDN).
	deviceDnsDomain string
	// A name that uniquely identifies the device generating this event.
	deviceExternalId string
	// The facility generating this event. For example, Syslog has an explicit facility associated with every event.
	deviceFacility string
	// Interface on which the packet or data entered the device.
	deviceInboundInterface string
	// The Windows domain name of the device address.
	deviceNtDomain string
	// Interface on which the packet or data left the device
	deviceOutboundInterface string
	// Unique identifier for the payload associated with the event.
	devicepayloadid string
	// Process name associated with the event. An example might be the process generating the syslog entry in UNIX.
	deviceProcessName string
	// Identifies the translated device address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	deviceTranslatedAddress net.IP
	// Identifies the destination that an event refers to in an IP network. The format must be a fully qualified domain name (FQDN) associated with the destination node, when a node is available. Examples: “host.domain.com” or “host”.
	dhost string
	// The Windows domain name of the destination address.
	dntdom string
	// Provides the ID of the destination process associated with the event. For example, if an event contains process ID 105, “105” is the process ID
	dpid int
	// The typical values are “Administrator”, “User”, and “Guest”. This identifies the destination user’s privileges. In UNIX, for example, activity executed on the root user would be identified with destinationUser Privileges of “Administrator”.
	dpriv string
	// The name of the event’s destination process. Example: “telnetd” or “sshd”.
	dproc string
	// The valid port numbers are between 0 and 65535.
	dpt int
	// Identifies the destination address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	dst net.IP
	// The timezone for the device generating the event.
	dtz string
	// Identifies the destination user by ID. For example, in UNIX, the root user is generally associated with user ID 0
	duid string
	// Identifies the destination user by name. This is the user associated with the event’s destination. Email addresses are often mapped into the UserName fields. The recipient is a candidate to put into this field.
	duser string
	// Identifies the device address that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
	dvc net.IP
	// The format should be a fully qualified domain name (FQDN) associated with the device node, when a node is available. Example: “host.domain.com” or “host”.
	dvchost string
	// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
	dvcmac net.HardwareAddr
	// Provides the ID of the process on the device generating the event.
	dvcpid int
}

func (f *extensionFields) SetAct(v string) *extensionFields {
	if len(v) > 63 {
		v = v[:63]
	}

	f.act = v

	return f
}

func (f *extensionFields) SetApp(v string) *extensionFields {
	if len(v) > 31 {
		v = v[:31]
	}

	f.app = v

	return f
}

func (f *extensionFields) SetC6a1(v net.IP) *extensionFields {
	f.c6a1 = v

	return f
}

func (f *extensionFields) SetC6a1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.c6a1Label = v

	return f
}

func (f *extensionFields) SetC6a3(v net.IP) *extensionFields {
	f.c6a3 = v

	return f
}

func (f *extensionFields) SetC6a3Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.c6a3Label = v

	return f
}

func (f *extensionFields) SetC6a4(v net.IP) *extensionFields {
	f.c6a4 = v

	return f
}

func (f *extensionFields) SetC6a4Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.c6a4Label = v

	return f
}

func (f *extensionFields) SetCat(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cat = v

	return f
}

func (f *extensionFields) SetCfp1(v float64) *extensionFields {
	f.cfp1 = v

	return f
}

func (f *extensionFields) SetCfp1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cfp1Label = v

	return f
}

func (f *extensionFields) SetCfp2(v float64) *extensionFields {
	f.cfp2 = v

	return f
}

func (f *extensionFields) SetCfp2Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cfp2Label = v

	return f
}

func (f *extensionFields) SetCfp3(v float64) *extensionFields {
	f.cfp3 = v

	return f
}

func (f *extensionFields) SetCfp3Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cfp3Label = v

	return f
}

func (f *extensionFields) SetCfp4(v float64) *extensionFields {
	f.cfp4 = v

	return f
}

func (f *extensionFields) SetCfp4Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cfp4Label = v

	return f
}

func (f *extensionFields) SetCn1(v int64) *extensionFields {
	f.cn1 = v

	return f
}

func (f *extensionFields) SetCn1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cn1Label = v

	return f
}

func (f *extensionFields) SetCn2(v int64) *extensionFields {
	f.cn2 = v

	return f
}

func (f *extensionFields) SetCn2Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cn2Label = v

	return f
}

func (f *extensionFields) SetCn3(v int64) *extensionFields {
	f.cn3 = v

	return f
}

func (f *extensionFields) SetCn3Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cn3Label = v

	return f
}

func (f *extensionFields) SetCnt(v int) *extensionFields {
	f.cnt = v

	return f
}

func (f *extensionFields) SetCs1(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs1 = v

	return f
}

func (f *extensionFields) SetCs1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs1Label = v

	return f
}

func (f *extensionFields) SetCs2(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs2 = v

	return f
}

func (f *extensionFields) SetCs2Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs2Label = v

	return f
}

func (f *extensionFields) SetCs3(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs3 = v

	return f
}

func (f *extensionFields) SetCs3Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs3Label = v

	return f
}

func (f *extensionFields) SetCs4(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs4 = v

	return f
}

func (f *extensionFields) SetCs4Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs4Label = v

	return f
}

func (f *extensionFields) SetCs5(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs5 = v

	return f
}

func (f *extensionFields) SetCs5Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs5Label = v

	return f
}

func (f *extensionFields) SetCs6(v string) *extensionFields {
	if len(v) > 4000 {
		v = v[:4000]
	}

	f.cs6 = v

	return f
}

func (f *extensionFields) SetCs6Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.cs6Label = v

	return f
}

func (f *extensionFields) SetDestinationDnsDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.destinationDnsDomain = v

	return f
}

func (f *extensionFields) SetDestinationServiceName(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.destinationServiceName = v

	return f
}

func (f *extensionFields) SetDestinationTranslatedAddress(v net.IP) *extensionFields {
	f.destinationTranslatedAddress = v

	return f
}

func (f *extensionFields) SetDestinationTranslatedPort(v int) *extensionFields {
	f.destinationTranslatedPort = v

	return f
}

func (f *extensionFields) SetDeviceCustomDate1(v string) *extensionFields {
	f.deviceCustomDate1 = v

	return f
}

func (f *extensionFields) SetDeviceCustomDate1Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.deviceCustomDate1Label = v

	return f
}

func (f *extensionFields) SetDeviceCustomDate2(v string) *extensionFields {
	f.deviceCustomDate2 = v

	return f
}

func (f *extensionFields) SetDeviceCustomDate2Label(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.deviceCustomDate2Label = v

	return f
}

func (f *extensionFields) SetDeviceDirection(v int) *extensionFields {
	f.deviceDirection = v

	return f
}

func (f *extensionFields) SetDeviceDnsDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.deviceDnsDomain = v

	return f
}

func (f *extensionFields) SetDeviceExternalId(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.deviceExternalId = v

	return f
}

func (f *extensionFields) SetDeviceFacility(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.deviceFacility = v

	return f
}

func (f *extensionFields) SetDeviceInboundInterface(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.deviceInboundInterface = v

	return f
}

func (f *extensionFields) SetDeviceNtDomain(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.deviceNtDomain = v

	return f
}

func (f *extensionFields) SetDeviceOutboundInterface(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.deviceOutboundInterface = v

	return f
}

func (f *extensionFields) SetDevicePayloadId(v string) *extensionFields {
	if len(v) > 128 {
		v = v[:128]
	}

	f.devicepayloadid = v

	return f
}

func (f *extensionFields) SetDeviceProcessName(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.deviceProcessName = v

	return f
}

func (f *extensionFields) SetDeviceTranslatedAddress(v net.IP) *extensionFields {
	f.deviceTranslatedAddress = v

	return f
}

func (f *extensionFields) SetDhost(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.dhost = v

	return f
}

func (f *extensionFields) SetDntdom(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.dntdom = v

	return f
}

func (f *extensionFields) SetDpid(v int) *extensionFields {
	f.dpid = v

	return f
}

func (f *extensionFields) SetDpriv(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.dpriv = v

	return f
}

func (f *extensionFields) SetDproc(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.dproc = v

	return f
}

func (f *extensionFields) SetDpt(v int) *extensionFields {
	f.dpt = v

	return f
}

func (f *extensionFields) SetDst(v net.IP) *extensionFields {
	f.dst = v

	return f
}

func (f *extensionFields) SetDtz(v string) *extensionFields {
	if len(v) > 255 {
		v = v[:255]
	}

	f.dtz = v

	return f
}

func (f *extensionFields) SetDuid(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.duid = v

	return f
}

func (f *extensionFields) SetDuser(v string) *extensionFields {
	if len(v) > 1023 {
		v = v[:1023]
	}

	f.duser = v

	return f
}

func (f *extensionFields) SetDvc(v net.IP) *extensionFields {
	f.dvc = v

	return f
}

func (f *extensionFields) SetDvchost(v string) *extensionFields {
	if len(v) > 100 {
		v = v[:100]
	}

	f.dvchost = v

	return f
}

func (f *extensionFields) SetDvcmac(v net.HardwareAddr) *extensionFields {
	f.dvcmac = v

	return f
}

func (f *extensionFields) SetDvcpid(v int) *extensionFields {
	f.dvcpid = v

	return f
}

// Action taken by the device.
func (f *extensionFields) Act() string {
	return f.act
}

// Application level protocol, example: HTTP, HTTPS, SSHv2, Telnet, POP, IMPA, IMAPS, and so on.
func (f *extensionFields) App() string {
	return f.app
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) C6a1() net.IP {
	return f.c6a1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) C6a1Label() string {
	return f.c6a1Label
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) C6a3() net.IP {
	return f.c6a3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) C6a3Label() string {
	return f.c6a3Label
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) C6a4() net.IP {
	return f.c6a4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) C6a4Label() string {
	return f.c6a4Label
}

// Represents the category assigned by the originating device. Devices often use their own categorization schema to classify event. Example: “/Monitor/Disk/Read”
func (f *extensionFields) Cat() string {
	return f.cat
}

// One of our floating point fields available to map fields that do not apply to any other in this dictionary.
func (f *extensionFields) Cfp1() float64 {
	return f.cfp1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cfp1Label() string {
	return f.cfp1Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (f *extensionFields) Cfp2() float64 {
	return f.cfp2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cfp2Label() string {
	return f.cfp2Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (f *extensionFields) Cfp3() float64 {
	return f.cfp3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cfp3Label() string {
	return f.cfp3Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (f *extensionFields) Cfp4() float64 {
	return f.cfp4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cfp4Label() string {
	return f.cfp4Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (f *extensionFields) Cn1() int64 {
	return f.cn1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cn1Label() string {
	return f.cn1Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (f *extensionFields) Cn2() int64 {
	return f.cn2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field. Implementing ArcSight Common Event Format (CEF) - Version 26 ArcS
func (f *extensionFields) Cn2Label() string {
	return f.cn2Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (f *extensionFields) Cn3() int64 {
	return f.cn3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cn3Label() string {
	return f.cn3Label
}

// A count associated with this event. How many times was this same event observed? Count can be omitted if it is 1.
func (f *extensionFields) Cnt() int {
	return f.cnt
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
func (f *extensionFields) Cs1() string {
	return f.cs1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cs1Label() string {
	return f.cs1Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) Cs2() string {
	return f.cs2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
func (f *extensionFields) Cs2Label() string {
	return f.cs2Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (f *extensionFields) Cs3() string {
	return f.cs3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cs3Label() string {
	return f.cs3Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
func (f *extensionFields) Cs4() string {
	return f.cs4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cs4Label() string {
	return f.cs4Label
}

// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (f *extensionFields) Cs5() string {
	return f.cs5
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
func (f *extensionFields) Cs5Label() string {
	return f.cs5Label
}

// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (f *extensionFields) Cs6() string {
	return f.cs6
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) Cs6Label() string {
	return f.cs6Label
}

// The DNS domain part of the complete fully qualified domain name (FQDN).
func (f *extensionFields) DestinationDnsDomain() string {
	return f.destinationDnsDomain
}

// The service targeted by this event. Example: “sshd”
func (f *extensionFields) DestinationServiceName() string {
	return f.destinationServiceName
}

// Identifies the translated destination that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (f *extensionFields) DestinationTranslatedAddress() net.IP {
	return f.destinationTranslatedAddress
}

// Port after it was translated; for example, a firewall. Valid port numbers are 0 to 65535
func (f *extensionFields) DestinationTranslatedPort() int {
	return f.destinationTranslatedPort
}

// One of two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (f *extensionFields) DeviceCustomDate1() string {
	return f.deviceCustomDate1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) DeviceCustomDate1Label() string {
	return f.deviceCustomDate1Label
}

// One of the two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions
func (f *extensionFields) DeviceCustomDate2() string {
	return f.deviceCustomDate2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (f *extensionFields) DeviceCustomDate2Label() string {
	return f.deviceCustomDate2Label
}

// Any information about what direction the observed communication has taken. The following values are supported: “0” for inbound or “1” for outbound
func (f *extensionFields) DeviceDirection() int {
	return f.deviceDirection
}

// The DNS domain part of the complete fully qualified domain name (FQDN).
func (f *extensionFields) DeviceDnsDomain() string {
	return f.deviceDnsDomain
}

// A name that uniquely identifies the device generating this event.
func (f *extensionFields) DeviceExternalId() string {
	return f.deviceExternalId
}

// The facility generating this event. For example, Syslog has an explicit facility associated with every event.
func (f *extensionFields) DeviceFacility() string {
	return f.deviceFacility
}

// Interface on which the packet or data entered the device.
func (f *extensionFields) DeviceInboundInterface() string {
	return f.deviceInboundInterface
}

// The Windows domain name of the device address.
func (f *extensionFields) DeviceNtDomain() string {
	return f.deviceNtDomain
}

// Interface on which the packet or data left the device
func (f *extensionFields) DeviceOutboundInterface() string {
	return f.deviceOutboundInterface
}

// Unique identifier for the payload associated with the event.
func (f *extensionFields) DevicePayloadId() string {
	return f.devicepayloadid
}

// Process name associated with the event. An example might be the process generating the syslog entry in UNIX.
func (f *extensionFields) DeviceProcessName() string {
	return f.deviceProcessName
}

// Identifies the translated device address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (f *extensionFields) DeviceTranslatedAddress() net.IP {
	return f.deviceTranslatedAddress
}

// Identifies the destination that an event refers to in an IP network. The format must be a fully qualified domain name (FQDN) associated with the destination node, when a node is available. Examples: “host.domain.com” or “host”.
func (f *extensionFields) Dhost() string {
	return f.dhost
}

// The Windows domain name of the destination address.
func (f *extensionFields) Dntdom() string {
	return f.dntdom
}

// Provides the ID of the destination process associated with the event. For example, if an event contains process ID 105, “105” is the process ID
func (f *extensionFields) Dpid() int {
	return f.dpid
}

// The typical values are “Administrator”, “User”, and “Guest”. This identifies the destination user’s privileges. In UNIX, for example, activity executed on the root user would be identified with destinationUser Privileges of “Administrator”.
func (f *extensionFields) Dpriv() string {
	return f.dpriv
}

// The name of the event’s destination process. Example: “telnetd” or “sshd”.
func (f *extensionFields) Dproc() string {
	return f.dproc
}

// The valid port numbers are between 0 and 65535.
func (f *extensionFields) Dpt() int {
	return f.dpt
}

// Identifies the destination address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (f *extensionFields) Dst() net.IP {
	return f.dst
}

// The timezone for the device generating the event.
func (f *extensionFields) Dtz() string {
	return f.dtz
}

// Identifies the destination user by ID. For example, in UNIX, the root user is generally associated with user ID 0
func (f *extensionFields) Duid() string {
	return f.duid
}

// Identifies the destination user by name. This is the user associated with the event’s destination. Email addresses are often mapped into the UserName fields. The recipient is a candidate to put into this field.
func (f *extensionFields) Duser() string {
	return f.duser
}

// Identifies the device address that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
func (f *extensionFields) Dvc() net.IP {
	return f.dvc
}

// The format should be a fully qualified domain name (FQDN) associated with the device node, when a node is available. Example: “host.domain.com” or “host”.
func (f *extensionFields) Dvchost() string {
	return f.dvchost
}

// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
func (f *extensionFields) Dvcmac() net.HardwareAddr {
	return f.dvcmac
}

// Provides the ID of the process on the device generating the event.
func (f *extensionFields) Dvcpid() int {
	return f.dvcpid
}
