// Code generated by go.m8.ru/cef, DO NOT EDIT.

package cef

import "net"

type extensionFields struct {
	// Action taken by the device.
	act string
	// Application level protocol, example: HTTP, HTTPS, SSHv2, Telnet, POP, IMPA, IMAPS, and so on.
	app string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a1 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a1Label string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a3 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a3Label string
	// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	c6a4 net.IP
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	c6a4Label string
	// Represents the category assigned by the originating device. Devices often use their own categorization schema to classify event. Example: “/Monitor/Disk/Read”
	cat string
	// One of our floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp1 float32
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp1Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp2 float32
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp2Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp3 float32
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp3Label string
	// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
	cfp4 float32
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cfp4Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn1 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cn1Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn2 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field. Implementing ArcSight Common Event Format (CEF) - Version 26 ArcS
	cn2Label string
	// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
	cn3 int64
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cn3Label string
	// A count associated with this event. How many times was this same event observed? Count can be omitted if it is 1.
	cnt int
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
	cs1 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs1Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	cs2 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
	cs2Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
	cs3 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs3Label string
	// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
	cs4 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs4Label string
	// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	cs5 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
	cs5Label string
	// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	cs6 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	cs6Label string
	// The DNS domain part of the complete fully qualified domain name (FQDN).
	destinationDNSDomain string
	// The service targeted by this event. Example: “sshd”
	destinationServiceName string
	// Identifies the translated destination that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	destinationTranslatedAddress net.IP
	// Port after it was translated; for example, a firewall. Valid port numbers are 0 to 65535
	destinationTranslatedPort int
	// One of two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
	deviceCustomDate1 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	deviceCustomDate1Label string
	// One of the two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions
	deviceCustomDate2 string
	// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
	deviceCustomDate2Label string
	// Any information about what direction the observed communication has taken. The following values are supported: “0” for inbound or “1” for outbound
	deviceDirection int
	// The DNS domain part of the complete fully qualified domain name (FQDN).
	deviceDNSDomain string
	// A name that uniquely identifies the device generating this event.
	deviceExternalID string
	// The facility generating this event. For example, Syslog has an explicit facility associated with every event.
	deviceFacility string
	// Interface on which the packet or data entered the device.
	deviceInboundInterface string
	// The Windows domain name of the device address.
	deviceNtDomain string
	// Interface on which the packet or data left the device
	deviceOutboundInterface string
	// Unique identifier for the payload associated with the event.
	devicePayloadID string
	// Process name associated with the event. An example might be the process generating the syslog entry in UNIX.
	deviceProcessName string
	// Identifies the translated device address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	deviceTranslatedAddress net.IP
	// Identifies the destination that an event refers to in an IP network. The format must be a fully qualified domain name (FQDN) associated with the destination node, when a node is available. Examples: “host.domain.com” or “host”.
	dhost string
	// The Windows domain name of the destination address.
	dntdom string
	// Provides the ID of the destination process associated with the event. For example, if an event contains process ID 105, “105” is the process ID
	dpid int
	// The typical values are “Administrator”, “User”, and “Guest”. This identifies the destination user’s privileges. In UNIX, for example, activity executed on the root user would be identified with destinationUser Privileges of “Administrator”.
	dpriv string
	// The name of the event’s destination process. Example: “telnetd” or “sshd”.
	dproc string
	// The valid port numbers are between 0 and 65535.
	dpt int
	// Identifies the destination address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
	dst net.IP
	// The timezone for the device generating the event.
	dtz string
	// Identifies the destination user by ID. For example, in UNIX, the root user is generally associated with user ID 0
	duid string
	// Identifies the destination user by name. This is the user associated with the event’s destination. Email addresses are often mapped into the UserName fields. The recipient is a candidate to put into this field.
	duser string
	// Identifies the device address that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
	dvc net.IP
	// The format should be a fully qualified domain name (FQDN) associated with the device node, when a node is available. Example: “host.domain.com” or “host”.
	dvchost string
	// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
	dvcmac net.HardwareAddr
	// Provides the ID of the process on the device generating the event.
	dvcpid int
	// The time at which the activity related to the event ended. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st1970). An example would be reporting the end of a session.
	end string
	// The ID used by an originating device. They are usually increasing numbers, associated with events.
	externalID string
	// Time when the file was created.
	fileCreateTime string
	// Hash of a file.
	fileHash string
	// An ID associated with a file could be the inode.
	fileID string
	// Time when the file was last modified.
	fileModificationTime string
	// Full path to the file, including file name itself. Example: C:\Program Files \WindowsNT\Access ories\ wordpad.exe or /usr/bin/zip
	filePath string
	// Permissions of the file.
	filePermission string
	// Type of file (pipe, socket, etc.)
	fileType string
	// A timestamp field available to map a timestamp that does not apply to any other defined timestamp field in this dictionary. Use all flex fields sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
	flexDate1 string
	// The label field is a string and describes the purpose of the flex field.
	flexDate1Label string
	// One of four floating point fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
	flexString1 string
	// The label field is a string and describes the purpose of the flex field
	flexString1Label string
	// One of four floating point fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
	flexString2 string
	// The label field is a string and describes the purpose of the flex field.
	flexString2Label string
	// Name of the file only (without its path).
	fname string
	// Size of the file.
	fsize int64
	// Number of bytes transferred inbound, relative to the source to destination relationship, meaning that data was flowing from source to destination.
	in int64
	// An arbitrary message giving more details about the event. Multi-line entries can be produced by using \n as the new line separator.
	msg string
	// Time when old file was created.
	oldFileCreateTime string
	// Hash of the old file
	oldFileHash string
	// An ID associated with the old file could be the inode.
	oldFileID string
	// Time when old file was last modified.
	oldFileModificationTime string
	// Name of the old file.
	oldFileName string
	// Full path to the old file, including the file name itself. Examples: c:\Program Files\ WindowsNT\Accesso ries \wordpad.exe or /usr/bin/zip
	oldFilePath string
	// Permissions of the old file.
	oldFilePermission string
	// Size of the old file.
	oldFileSize int64
	// Type of the old file (pipe, socket, etc.)
	oldFileType string
	// Number of bytes transferred outbound relative to the source to destination relationship. For example, the byte number of data flowing from the destination to the source.
	out int
	// Displays the outcome, usually as ‘success’ or ‘failure’.
	outcome string
	// Identifies the Layer-4 protocol used. The possible values are protocols such as TCP or UDP
	proto string
	// The reason an audit event was generated. For example “badd password” or “unknown user”. This could also be an error or return code. Example: “0x1234”
	reason string
	// In the case of an HTTP request, this field contains the URL accessed. The URL should contain the protocol as well. Example: “http://www/secure. com”
	request string
	// The User-Agent associated with the request.
	requestClientApplication string
	// Description of the content from which the request originated (for example, HTTP Referrer)
	requestContext string
	// Cookies associated with the request.
	requestCookies string
	// The method used to access a URL. Possible values: “POST”, “GET”, etc.
	requestMethod string
	// The time at which the event related to the activity was received. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st 1970)
	rt string
	// Identifies the source that an event refers to in an IP network. The format should be a fully qualified domain name (FQDN) associated with the source node, when a mode is available. Examples: “host” or “host.domain.com”.
	shost string
	// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
	smac net.HardwareAddr
	// The Windows domain name for the source address.
	sntdom string
	// The DNS domain part of the complete fully qualified domain name (FQDN).
	sourceDNSDomain string
	// The service that is responsible for generating this event.
	sourceServiceName string
	// Identifies the translated source that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
	sourceTranslatedAddress net.IP
	// A port number after being translated by, for example, a firewall. Valid port numbers are 0 to 65535.
	sourceTranslatedPort int
	// The ID of the source process associated with the event
	spid int
	// The typical values are “Administrator”, “User”, and “Guest”. It identifies the source user’s privileges. In UNIX, for example, activity executed by the root user would be identified with “Administrator”.
	spriv string
	// The name of the event’s source process.
	sproc string
	// The valid port numbers are 0 to 65535.
	spt int
	// Identifies the source that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
	src net.IP
	// The time when the activity the event referred to started. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st 1970)
	start string
	// Identifies the source user by ID. This is the user associated with the source of the event. For example, in UNIX, the root user is generally associated with user ID 0.
	suid string
	// Identifies the source user by name. Email addresses are also mapped into the UserName fields. The sender is a candidate to put into this field.
	suser string
	// 0 means base event, 1 means aggregated, 2 means correlation, and 3 means action. This field can be omitted for base events (type 0)
	typ int
	// The DNS domain name of the ArcSight connector that processed the event.
	agentDNSDomain string
	agentNtDomain string
	agentTranslatedAddress net.IP
	agentTranslatedZoneExternalID string
	agentTranslatedZoneURI string
	agentZoneExternalID string
	agentZoneURI string
	// The IP address of the ArcSight connector that processed the event.
	agt net.IP
	// The hostname of the ArcSight connector that processed the event.
	ahost string
	// The agent ID of the ArcSight connector that processed the event.
	aid string
	// The MAC address of the ArcSight connector that processed the event.
	amac net.HardwareAddr
	// The time at which information about the event was received by the ArcSight connector.
	art string
	// The agent type of the ArcSight connector that processed the event
	at string
	// The agent time zone of the ArcSight connector that processed the event.
	atz string
	// The version of the ArcSight connector that processed the event.
	av string
	customerExternalID string
	customerURI string
	destinatioTranslatedZoneExternalID string
	// The URI for the Translated Zone that the destination asset has been assigned to in ArcSight.
	destinationTranslatedZoneURI string
	destinationZoneExternalID string
	// The URI for the Zone that the destination asset has been assigned to in ArcSight.
	destinationZoneURI string
	deviceTranslatedZoneExternalID string
	// The URI for the Translated Zone that the device asset has been assigned to in ArcSight.
	deviceTranslatedZoneURI string
	deviceZoneExternalID string
	// Thee URI for the Zone that the device asset has been assigned to in ArcSight.
	deviceZoneURI string
	// The latitudinal value from which the destination’s IP address belongs.
	dlat float64
	// The longitudinal value from which the destination’s IP address belongs.
	dlong float64
	// This is a unique ID that ArcSight assigns to each event.
	eventID int64
	rawEvent string
	slat float64
	slong float64
	sourceTranslatedZoneExternalID string
	// The URI for the Translated Zone that the destination asset has been assigned to in ArcSight.
	sourceTranslatedZoneURI string
	sourceZoneExternalID string
	// The URI for the Zone that the source asset has been assigned to in ArcSight.
	sourceZoneURI string
	// ID of an agentTranslatedZone resource reference.
	agentTranslatedZoneKey int64
	// ID of an agentZone resource reference.
	agentZoneKey int64
	// ID of a customer resource reference.
	customerKey int64
	// ID of a destinationTranslate dZone resource reference.
	destinationTranslatedZoneKey int64
	// ID of a destinationZone resource reference.
	dZoneKey int64
	// ID of a deviceTranslatedZone resource reference.
	deviceTranslatedZoneKey int64
	// ID of a deviceZone resource reference.
	deviceZoneKey int64
	// ID of a sourceTranslatedZon e resource reference.
	sTranslatedZoneKey int64
	// ID of a sourceZone resource reference
	sZoneKey int64
}

// SetAct sets "act" field.
func (cef *CEF) SetAct(v string) *CEF {
	if cef.act != "" {
		return cef
	}

	if len(v) > 63 {
		v = v[:63]
	}

	cef.act = v

	return cef
}

// SetApp sets "app" field.
func (cef *CEF) SetApp(v string) *CEF {
	if cef.app != "" {
		return cef
	}

	if len(v) > 31 {
		v = v[:31]
	}

	cef.app = v

	return cef
}

// SetC6a1 sets "c6a1" field.
func (cef *CEF) SetC6a1(v net.IP) *CEF {
	if len(cef.c6a1) > 0 {
		return cef
	}

	cef.c6a1 = v

	return cef
}

// SetC6a1Label sets "c6a1Label" field.
func (cef *CEF) SetC6a1Label(v string) *CEF {
	if cef.c6a1Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.c6a1Label = v

	return cef
}

// SetC6a3 sets "c6a3" field.
func (cef *CEF) SetC6a3(v net.IP) *CEF {
	if len(cef.c6a3) > 0 {
		return cef
	}

	cef.c6a3 = v

	return cef
}

// SetC6a3Label sets "c6a3Label" field.
func (cef *CEF) SetC6a3Label(v string) *CEF {
	if cef.c6a3Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.c6a3Label = v

	return cef
}

// SetC6a4 sets "c6a4" field.
func (cef *CEF) SetC6a4(v net.IP) *CEF {
	if len(cef.c6a4) > 0 {
		return cef
	}

	cef.c6a4 = v

	return cef
}

// SetC6a4Label sets "c6a4Label" field.
func (cef *CEF) SetC6a4Label(v string) *CEF {
	if cef.c6a4Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.c6a4Label = v

	return cef
}

// SetCat sets "cat" field.
func (cef *CEF) SetCat(v string) *CEF {
	if cef.cat != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cat = v

	return cef
}

// SetCfp1 sets "cfp1" field.
func (cef *CEF) SetCfp1(v float32) *CEF {
	if cef.cfp1 != 0 {
		return cef
	}

	cef.cfp1 = v

	return cef
}

// SetCfp1Label sets "cfp1Label" field.
func (cef *CEF) SetCfp1Label(v string) *CEF {
	if cef.cfp1Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cfp1Label = v

	return cef
}

// SetCfp2 sets "cfp2" field.
func (cef *CEF) SetCfp2(v float32) *CEF {
	if cef.cfp2 != 0 {
		return cef
	}

	cef.cfp2 = v

	return cef
}

// SetCfp2Label sets "cfp2Label" field.
func (cef *CEF) SetCfp2Label(v string) *CEF {
	if cef.cfp2Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cfp2Label = v

	return cef
}

// SetCfp3 sets "cfp3" field.
func (cef *CEF) SetCfp3(v float32) *CEF {
	if cef.cfp3 != 0 {
		return cef
	}

	cef.cfp3 = v

	return cef
}

// SetCfp3Label sets "cfp3Label" field.
func (cef *CEF) SetCfp3Label(v string) *CEF {
	if cef.cfp3Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cfp3Label = v

	return cef
}

// SetCfp4 sets "cfp4" field.
func (cef *CEF) SetCfp4(v float32) *CEF {
	if cef.cfp4 != 0 {
		return cef
	}

	cef.cfp4 = v

	return cef
}

// SetCfp4Label sets "cfp4Label" field.
func (cef *CEF) SetCfp4Label(v string) *CEF {
	if cef.cfp4Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cfp4Label = v

	return cef
}

// SetCn1 sets "cn1" field.
func (cef *CEF) SetCn1(v int64) *CEF {
	if cef.cn1 != 0 {
		return cef
	}

	cef.cn1 = v

	return cef
}

// SetCn1Label sets "cn1Label" field.
func (cef *CEF) SetCn1Label(v string) *CEF {
	if cef.cn1Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cn1Label = v

	return cef
}

// SetCn2 sets "cn2" field.
func (cef *CEF) SetCn2(v int64) *CEF {
	if cef.cn2 != 0 {
		return cef
	}

	cef.cn2 = v

	return cef
}

// SetCn2Label sets "cn2Label" field.
func (cef *CEF) SetCn2Label(v string) *CEF {
	if cef.cn2Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cn2Label = v

	return cef
}

// SetCn3 sets "cn3" field.
func (cef *CEF) SetCn3(v int64) *CEF {
	if cef.cn3 != 0 {
		return cef
	}

	cef.cn3 = v

	return cef
}

// SetCn3Label sets "cn3Label" field.
func (cef *CEF) SetCn3Label(v string) *CEF {
	if cef.cn3Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cn3Label = v

	return cef
}

// SetCnt sets "cnt" field.
func (cef *CEF) SetCnt(v int) *CEF {
	if cef.cnt != 0 {
		return cef
	}

	cef.cnt = v

	return cef
}

// SetCs1 sets "cs1" field.
func (cef *CEF) SetCs1(v string) *CEF {
	if cef.cs1 != "" {
		return cef
	}

	if len(v) > 4000 {
		v = v[:4000]
	}

	cef.cs1 = v

	return cef
}

// SetCs1Label sets "cs1Label" field.
func (cef *CEF) SetCs1Label(v string) *CEF {
	if cef.cs1Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cs1Label = v

	return cef
}

// SetCs2 sets "cs2" field.
func (cef *CEF) SetCs2(v string) *CEF {
	if cef.cs2 != "" {
		return cef
	}

	if len(v) > 4000 {
		v = v[:4000]
	}

	cef.cs2 = v

	return cef
}

// SetCs2Label sets "cs2Label" field.
func (cef *CEF) SetCs2Label(v string) *CEF {
	if cef.cs2Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cs2Label = v

	return cef
}

// SetCs3 sets "cs3" field.
func (cef *CEF) SetCs3(v string) *CEF {
	if cef.cs3 != "" {
		return cef
	}

	if len(v) > 4000 {
		v = v[:4000]
	}

	cef.cs3 = v

	return cef
}

// SetCs3Label sets "cs3Label" field.
func (cef *CEF) SetCs3Label(v string) *CEF {
	if cef.cs3Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cs3Label = v

	return cef
}

// SetCs4 sets "cs4" field.
func (cef *CEF) SetCs4(v string) *CEF {
	if cef.cs4 != "" {
		return cef
	}

	if len(v) > 4000 {
		v = v[:4000]
	}

	cef.cs4 = v

	return cef
}

// SetCs4Label sets "cs4Label" field.
func (cef *CEF) SetCs4Label(v string) *CEF {
	if cef.cs4Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cs4Label = v

	return cef
}

// SetCs5 sets "cs5" field.
func (cef *CEF) SetCs5(v string) *CEF {
	if cef.cs5 != "" {
		return cef
	}

	if len(v) > 4000 {
		v = v[:4000]
	}

	cef.cs5 = v

	return cef
}

// SetCs5Label sets "cs5Label" field.
func (cef *CEF) SetCs5Label(v string) *CEF {
	if cef.cs5Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cs5Label = v

	return cef
}

// SetCs6 sets "cs6" field.
func (cef *CEF) SetCs6(v string) *CEF {
	if cef.cs6 != "" {
		return cef
	}

	if len(v) > 4000 {
		v = v[:4000]
	}

	cef.cs6 = v

	return cef
}

// SetCs6Label sets "cs6Label" field.
func (cef *CEF) SetCs6Label(v string) *CEF {
	if cef.cs6Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.cs6Label = v

	return cef
}

// SetDestinationDNSDomain sets "destinationDNSDomain" field.
func (cef *CEF) SetDestinationDNSDomain(v string) *CEF {
	if cef.destinationDNSDomain != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.destinationDNSDomain = v

	return cef
}

// SetDestinationServiceName sets "destinationServiceName" field.
func (cef *CEF) SetDestinationServiceName(v string) *CEF {
	if cef.destinationServiceName != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.destinationServiceName = v

	return cef
}

// SetDestinationTranslatedAddress sets "destinationTranslatedAddress" field.
func (cef *CEF) SetDestinationTranslatedAddress(v net.IP) *CEF {
	if len(cef.destinationTranslatedAddress) > 0 {
		return cef
	}

	cef.destinationTranslatedAddress = v

	return cef
}

// SetDestinationTranslatedPort sets "destinationTranslatedPort" field.
func (cef *CEF) SetDestinationTranslatedPort(v int) *CEF {
	if cef.destinationTranslatedPort != 0 {
		return cef
	}

	cef.destinationTranslatedPort = v

	return cef
}

// SetDeviceCustomDate1 sets "deviceCustomDate1" field.
func (cef *CEF) SetDeviceCustomDate1(v string) *CEF {
	if cef.deviceCustomDate1 != "" {
		return cef
	}

	cef.deviceCustomDate1 = v

	return cef
}

// SetDeviceCustomDate1Label sets "deviceCustomDate1Label" field.
func (cef *CEF) SetDeviceCustomDate1Label(v string) *CEF {
	if cef.deviceCustomDate1Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.deviceCustomDate1Label = v

	return cef
}

// SetDeviceCustomDate2 sets "deviceCustomDate2" field.
func (cef *CEF) SetDeviceCustomDate2(v string) *CEF {
	if cef.deviceCustomDate2 != "" {
		return cef
	}

	cef.deviceCustomDate2 = v

	return cef
}

// SetDeviceCustomDate2Label sets "deviceCustomDate2Label" field.
func (cef *CEF) SetDeviceCustomDate2Label(v string) *CEF {
	if cef.deviceCustomDate2Label != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.deviceCustomDate2Label = v

	return cef
}

// SetDeviceDirection sets "deviceDirection" field.
func (cef *CEF) SetDeviceDirection(v int) *CEF {
	if cef.deviceDirection != 0 {
		return cef
	}

	cef.deviceDirection = v

	return cef
}

// SetDeviceDNSDomain sets "deviceDNSDomain" field.
func (cef *CEF) SetDeviceDNSDomain(v string) *CEF {
	if cef.deviceDNSDomain != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.deviceDNSDomain = v

	return cef
}

// SetDeviceExternalID sets "deviceExternalID" field.
func (cef *CEF) SetDeviceExternalID(v string) *CEF {
	if cef.deviceExternalID != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.deviceExternalID = v

	return cef
}

// SetDeviceFacility sets "deviceFacility" field.
func (cef *CEF) SetDeviceFacility(v string) *CEF {
	if cef.deviceFacility != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.deviceFacility = v

	return cef
}

// SetDeviceInboundInterface sets "deviceInboundInterface" field.
func (cef *CEF) SetDeviceInboundInterface(v string) *CEF {
	if cef.deviceInboundInterface != "" {
		return cef
	}

	if len(v) > 128 {
		v = v[:128]
	}

	cef.deviceInboundInterface = v

	return cef
}

// SetDeviceNtDomain sets "deviceNtDomain" field.
func (cef *CEF) SetDeviceNtDomain(v string) *CEF {
	if cef.deviceNtDomain != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.deviceNtDomain = v

	return cef
}

// SetDeviceOutboundInterface sets "deviceOutboundInterface" field.
func (cef *CEF) SetDeviceOutboundInterface(v string) *CEF {
	if cef.deviceOutboundInterface != "" {
		return cef
	}

	if len(v) > 128 {
		v = v[:128]
	}

	cef.deviceOutboundInterface = v

	return cef
}

// SetDevicePayloadID sets "devicePayloadID" field.
func (cef *CEF) SetDevicePayloadID(v string) *CEF {
	if cef.devicePayloadID != "" {
		return cef
	}

	if len(v) > 128 {
		v = v[:128]
	}

	cef.devicePayloadID = v

	return cef
}

// SetDeviceProcessName sets "deviceProcessName" field.
func (cef *CEF) SetDeviceProcessName(v string) *CEF {
	if cef.deviceProcessName != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.deviceProcessName = v

	return cef
}

// SetDeviceTranslatedAddress sets "deviceTranslatedAddress" field.
func (cef *CEF) SetDeviceTranslatedAddress(v net.IP) *CEF {
	if len(cef.deviceTranslatedAddress) > 0 {
		return cef
	}

	cef.deviceTranslatedAddress = v

	return cef
}

// SetDHost sets "dhost" field.
func (cef *CEF) SetDHost(v string) *CEF {
	if cef.dhost != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.dhost = v

	return cef
}

// SetDntdom sets "dntdom" field.
func (cef *CEF) SetDntdom(v string) *CEF {
	if cef.dntdom != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.dntdom = v

	return cef
}

// SetDPID sets "dpid" field.
func (cef *CEF) SetDPID(v int) *CEF {
	if cef.dpid != 0 {
		return cef
	}

	cef.dpid = v

	return cef
}

// SetDpriv sets "dpriv" field.
func (cef *CEF) SetDpriv(v string) *CEF {
	if cef.dpriv != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.dpriv = v

	return cef
}

// SetDproc sets "dproc" field.
func (cef *CEF) SetDproc(v string) *CEF {
	if cef.dproc != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.dproc = v

	return cef
}

// SetDpt sets "dpt" field.
func (cef *CEF) SetDpt(v int) *CEF {
	if cef.dpt != 0 {
		return cef
	}

	cef.dpt = v

	return cef
}

// SetDst sets "dst" field.
func (cef *CEF) SetDst(v net.IP) *CEF {
	if len(cef.dst) > 0 {
		return cef
	}

	cef.dst = v

	return cef
}

// SetDtz sets "dtz" field.
func (cef *CEF) SetDtz(v string) *CEF {
	if cef.dtz != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.dtz = v

	return cef
}

// SetDuid sets "duid" field.
func (cef *CEF) SetDuid(v string) *CEF {
	if cef.duid != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.duid = v

	return cef
}

// SetDuser sets "duser" field.
func (cef *CEF) SetDuser(v string) *CEF {
	if cef.duser != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.duser = v

	return cef
}

// SetDvc sets "dvc" field.
func (cef *CEF) SetDvc(v net.IP) *CEF {
	if len(cef.dvc) > 0 {
		return cef
	}

	cef.dvc = v

	return cef
}

// SetDvchost sets "dvchost" field.
func (cef *CEF) SetDvchost(v string) *CEF {
	if cef.dvchost != "" {
		return cef
	}

	if len(v) > 100 {
		v = v[:100]
	}

	cef.dvchost = v

	return cef
}

// SetDvcmac sets "dvcmac" field.
func (cef *CEF) SetDvcmac(v net.HardwareAddr) *CEF {
	if len(cef.dvcmac) > 0 {
		return cef
	}

	cef.dvcmac = v

	return cef
}

// SetDvcpid sets "dvcpid" field.
func (cef *CEF) SetDvcpid(v int) *CEF {
	if cef.dvcpid != 0 {
		return cef
	}

	cef.dvcpid = v

	return cef
}

// SetEnd sets "end" field.
func (cef *CEF) SetEnd(v string) *CEF {
	if cef.end != "" {
		return cef
	}

	cef.end = v

	return cef
}

// SetExternalID sets "externalID" field.
func (cef *CEF) SetExternalID(v string) *CEF {
	if cef.externalID != "" {
		return cef
	}

	if len(v) > 40 {
		v = v[:40]
	}

	cef.externalID = v

	return cef
}

// SetFileCreateTime sets "fileCreateTime" field.
func (cef *CEF) SetFileCreateTime(v string) *CEF {
	if cef.fileCreateTime != "" {
		return cef
	}

	cef.fileCreateTime = v

	return cef
}

// SetFileHash sets "fileHash" field.
func (cef *CEF) SetFileHash(v string) *CEF {
	if cef.fileHash != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.fileHash = v

	return cef
}

// SetFileID sets "fileID" field.
func (cef *CEF) SetFileID(v string) *CEF {
	if cef.fileID != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.fileID = v

	return cef
}

// SetFileModificationTime sets "fileModificationTime" field.
func (cef *CEF) SetFileModificationTime(v string) *CEF {
	if cef.fileModificationTime != "" {
		return cef
	}

	cef.fileModificationTime = v

	return cef
}

// SetFilePath sets "filePath" field.
func (cef *CEF) SetFilePath(v string) *CEF {
	if cef.filePath != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.filePath = v

	return cef
}

// SetFilePermission sets "filePermission" field.
func (cef *CEF) SetFilePermission(v string) *CEF {
	if cef.filePermission != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.filePermission = v

	return cef
}

// SetFileType sets "fileType" field.
func (cef *CEF) SetFileType(v string) *CEF {
	if cef.fileType != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.fileType = v

	return cef
}

// SetFlexDate1 sets "flexDate1" field.
func (cef *CEF) SetFlexDate1(v string) *CEF {
	if cef.flexDate1 != "" {
		return cef
	}

	cef.flexDate1 = v

	return cef
}

// SetFlexDate1Label sets "flexDate1Label" field.
func (cef *CEF) SetFlexDate1Label(v string) *CEF {
	if cef.flexDate1Label != "" {
		return cef
	}

	if len(v) > 128 {
		v = v[:128]
	}

	cef.flexDate1Label = v

	return cef
}

// SetFlexString1 sets "flexString1" field.
func (cef *CEF) SetFlexString1(v string) *CEF {
	if cef.flexString1 != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.flexString1 = v

	return cef
}

// SetFlexString1Label sets "flexString1Label" field.
func (cef *CEF) SetFlexString1Label(v string) *CEF {
	if cef.flexString1Label != "" {
		return cef
	}

	if len(v) > 128 {
		v = v[:128]
	}

	cef.flexString1Label = v

	return cef
}

// SetFlexString2 sets "flexString2" field.
func (cef *CEF) SetFlexString2(v string) *CEF {
	if cef.flexString2 != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.flexString2 = v

	return cef
}

// SetFlexString2Label sets "flexString2Label" field.
func (cef *CEF) SetFlexString2Label(v string) *CEF {
	if cef.flexString2Label != "" {
		return cef
	}

	if len(v) > 128 {
		v = v[:128]
	}

	cef.flexString2Label = v

	return cef
}

// SetFname sets "fname" field.
func (cef *CEF) SetFname(v string) *CEF {
	if cef.fname != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.fname = v

	return cef
}

// SetFsize sets "fsize" field.
func (cef *CEF) SetFsize(v int64) *CEF {
	if cef.fsize != 0 {
		return cef
	}

	cef.fsize = v

	return cef
}

// SetIn sets "in" field.
func (cef *CEF) SetIn(v int64) *CEF {
	if cef.in != 0 {
		return cef
	}

	cef.in = v

	return cef
}

// SetMsg sets "msg" field.
func (cef *CEF) SetMsg(v string) *CEF {
	if cef.msg != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.msg = v

	return cef
}

// SetOldFileCreateTime sets "oldFileCreateTime" field.
func (cef *CEF) SetOldFileCreateTime(v string) *CEF {
	if cef.oldFileCreateTime != "" {
		return cef
	}

	cef.oldFileCreateTime = v

	return cef
}

// SetOldFileHash sets "oldFileHash" field.
func (cef *CEF) SetOldFileHash(v string) *CEF {
	if cef.oldFileHash != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.oldFileHash = v

	return cef
}

// SetOldFileID sets "oldFileID" field.
func (cef *CEF) SetOldFileID(v string) *CEF {
	if cef.oldFileID != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.oldFileID = v

	return cef
}

// SetOldFileModificationTime sets "oldFileModificationTime" field.
func (cef *CEF) SetOldFileModificationTime(v string) *CEF {
	if cef.oldFileModificationTime != "" {
		return cef
	}

	cef.oldFileModificationTime = v

	return cef
}

// SetOldFileName sets "oldFileName" field.
func (cef *CEF) SetOldFileName(v string) *CEF {
	if cef.oldFileName != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.oldFileName = v

	return cef
}

// SetOldFilePath sets "oldFilePath" field.
func (cef *CEF) SetOldFilePath(v string) *CEF {
	if cef.oldFilePath != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.oldFilePath = v

	return cef
}

// SetOldFilePermission sets "oldFilePermission" field.
func (cef *CEF) SetOldFilePermission(v string) *CEF {
	if cef.oldFilePermission != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.oldFilePermission = v

	return cef
}

// SetOldFileSize sets "oldFileSize" field.
func (cef *CEF) SetOldFileSize(v int64) *CEF {
	if cef.oldFileSize != 0 {
		return cef
	}

	cef.oldFileSize = v

	return cef
}

// SetOldFileType sets "oldFileType" field.
func (cef *CEF) SetOldFileType(v string) *CEF {
	if cef.oldFileType != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.oldFileType = v

	return cef
}

// SetOut sets "out" field.
func (cef *CEF) SetOut(v int) *CEF {
	if cef.out != 0 {
		return cef
	}

	cef.out = v

	return cef
}

// SetOutcome sets "outcome" field.
func (cef *CEF) SetOutcome(v string) *CEF {
	if cef.outcome != "" {
		return cef
	}

	if len(v) > 63 {
		v = v[:63]
	}

	cef.outcome = v

	return cef
}

// SetProto sets "proto" field.
func (cef *CEF) SetProto(v string) *CEF {
	if cef.proto != "" {
		return cef
	}

	if len(v) > 31 {
		v = v[:31]
	}

	cef.proto = v

	return cef
}

// SetReason sets "reason" field.
func (cef *CEF) SetReason(v string) *CEF {
	if cef.reason != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.reason = v

	return cef
}

// SetRequest sets "request" field.
func (cef *CEF) SetRequest(v string) *CEF {
	if cef.request != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.request = v

	return cef
}

// SetRequestClientApplication sets "requestClientApplication" field.
func (cef *CEF) SetRequestClientApplication(v string) *CEF {
	if cef.requestClientApplication != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.requestClientApplication = v

	return cef
}

// SetRequestContext sets "requestContext" field.
func (cef *CEF) SetRequestContext(v string) *CEF {
	if cef.requestContext != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.requestContext = v

	return cef
}

// SetRequestCookies sets "requestCookies" field.
func (cef *CEF) SetRequestCookies(v string) *CEF {
	if cef.requestCookies != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.requestCookies = v

	return cef
}

// SetRequestMethod sets "requestMethod" field.
func (cef *CEF) SetRequestMethod(v string) *CEF {
	if cef.requestMethod != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.requestMethod = v

	return cef
}

// SetRt sets "rt" field.
func (cef *CEF) SetRt(v string) *CEF {
	if cef.rt != "" {
		return cef
	}

	cef.rt = v

	return cef
}

// SetShost sets "shost" field.
func (cef *CEF) SetShost(v string) *CEF {
	if cef.shost != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.shost = v

	return cef
}

// SetSmac sets "smac" field.
func (cef *CEF) SetSmac(v net.HardwareAddr) *CEF {
	if len(cef.smac) > 0 {
		return cef
	}

	cef.smac = v

	return cef
}

// SetSntdom sets "sntdom" field.
func (cef *CEF) SetSntdom(v string) *CEF {
	if cef.sntdom != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.sntdom = v

	return cef
}

// SetSourceDNSDomain sets "sourceDNSDomain" field.
func (cef *CEF) SetSourceDNSDomain(v string) *CEF {
	if cef.sourceDNSDomain != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.sourceDNSDomain = v

	return cef
}

// SetSourceServiceName sets "sourceServiceName" field.
func (cef *CEF) SetSourceServiceName(v string) *CEF {
	if cef.sourceServiceName != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.sourceServiceName = v

	return cef
}

// SetSourceTranslatedAddress sets "sourceTranslatedAddress" field.
func (cef *CEF) SetSourceTranslatedAddress(v net.IP) *CEF {
	if len(cef.sourceTranslatedAddress) > 0 {
		return cef
	}

	cef.sourceTranslatedAddress = v

	return cef
}

// SetSourceTranslatedPort sets "sourceTranslatedPort" field.
func (cef *CEF) SetSourceTranslatedPort(v int) *CEF {
	if cef.sourceTranslatedPort != 0 {
		return cef
	}

	cef.sourceTranslatedPort = v

	return cef
}

// SetSpid sets "spid" field.
func (cef *CEF) SetSpid(v int) *CEF {
	if cef.spid != 0 {
		return cef
	}

	cef.spid = v

	return cef
}

// SetSpriv sets "spriv" field.
func (cef *CEF) SetSpriv(v string) *CEF {
	if cef.spriv != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.spriv = v

	return cef
}

// SetSproc sets "sproc" field.
func (cef *CEF) SetSproc(v string) *CEF {
	if cef.sproc != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.sproc = v

	return cef
}

// SetSpt sets "spt" field.
func (cef *CEF) SetSpt(v int) *CEF {
	if cef.spt != 0 {
		return cef
	}

	cef.spt = v

	return cef
}

// SetSrc sets "src" field.
func (cef *CEF) SetSrc(v net.IP) *CEF {
	if len(cef.src) > 0 {
		return cef
	}

	cef.src = v

	return cef
}

// SetStart sets "start" field.
func (cef *CEF) SetStart(v string) *CEF {
	if cef.start != "" {
		return cef
	}

	cef.start = v

	return cef
}

// SetSuid sets "suid" field.
func (cef *CEF) SetSuid(v string) *CEF {
	if cef.suid != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.suid = v

	return cef
}

// SetSuser sets "suser" field.
func (cef *CEF) SetSuser(v string) *CEF {
	if cef.suser != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.suser = v

	return cef
}

// SetType sets "typ" field.
func (cef *CEF) SetType(v int) *CEF {
	if cef.typ != 0 {
		return cef
	}

	cef.typ = v

	return cef
}

// SetAgentDNSDomain sets "agentDNSDomain" field.
func (cef *CEF) SetAgentDNSDomain(v string) *CEF {
	if cef.agentDNSDomain != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.agentDNSDomain = v

	return cef
}

// SetAgentNtDomain sets "agentNtDomain" field.
func (cef *CEF) SetAgentNtDomain(v string) *CEF {
	if cef.agentNtDomain != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.agentNtDomain = v

	return cef
}

// SetAgentTranslatedAddress sets "agentTranslatedAddress" field.
func (cef *CEF) SetAgentTranslatedAddress(v net.IP) *CEF {
	if len(cef.agentTranslatedAddress) > 0 {
		return cef
	}

	cef.agentTranslatedAddress = v

	return cef
}

// SetAgentTranslatedZoneExternalID sets "agentTranslatedZoneExternalID" field.
func (cef *CEF) SetAgentTranslatedZoneExternalID(v string) *CEF {
	if cef.agentTranslatedZoneExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.agentTranslatedZoneExternalID = v

	return cef
}

// SetAgentTranslatedZoneURI sets "agentTranslatedZoneURI" field.
func (cef *CEF) SetAgentTranslatedZoneURI(v string) *CEF {
	if cef.agentTranslatedZoneURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.agentTranslatedZoneURI = v

	return cef
}

// SetAgentZoneExternalID sets "agentZoneExternalID" field.
func (cef *CEF) SetAgentZoneExternalID(v string) *CEF {
	if cef.agentZoneExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.agentZoneExternalID = v

	return cef
}

// SetAgentZoneURI sets "agentZoneURI" field.
func (cef *CEF) SetAgentZoneURI(v string) *CEF {
	if cef.agentZoneURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.agentZoneURI = v

	return cef
}

// SetAgt sets "agt" field.
func (cef *CEF) SetAgt(v net.IP) *CEF {
	if len(cef.agt) > 0 {
		return cef
	}

	cef.agt = v

	return cef
}

// SetAhost sets "ahost" field.
func (cef *CEF) SetAhost(v string) *CEF {
	if cef.ahost != "" {
		return cef
	}

	if len(v) > 1023 {
		v = v[:1023]
	}

	cef.ahost = v

	return cef
}

// SetAid sets "aid" field.
func (cef *CEF) SetAid(v string) *CEF {
	if cef.aid != "" {
		return cef
	}

	if len(v) > 40 {
		v = v[:40]
	}

	cef.aid = v

	return cef
}

// SetAmac sets "amac" field.
func (cef *CEF) SetAmac(v net.HardwareAddr) *CEF {
	if len(cef.amac) > 0 {
		return cef
	}

	cef.amac = v

	return cef
}

// SetArt sets "art" field.
func (cef *CEF) SetArt(v string) *CEF {
	if cef.art != "" {
		return cef
	}

	cef.art = v

	return cef
}

// SetAt sets "at" field.
func (cef *CEF) SetAt(v string) *CEF {
	if cef.at != "" {
		return cef
	}

	if len(v) > 63 {
		v = v[:63]
	}

	cef.at = v

	return cef
}

// SetAtz sets "atz" field.
func (cef *CEF) SetAtz(v string) *CEF {
	if cef.atz != "" {
		return cef
	}

	if len(v) > 255 {
		v = v[:255]
	}

	cef.atz = v

	return cef
}

// SetAv sets "av" field.
func (cef *CEF) SetAv(v string) *CEF {
	if cef.av != "" {
		return cef
	}

	if len(v) > 31 {
		v = v[:31]
	}

	cef.av = v

	return cef
}

// SetCustomerExternalID sets "customerExternalID" field.
func (cef *CEF) SetCustomerExternalID(v string) *CEF {
	if cef.customerExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.customerExternalID = v

	return cef
}

// SetCustomerURI sets "customerURI" field.
func (cef *CEF) SetCustomerURI(v string) *CEF {
	if cef.customerURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.customerURI = v

	return cef
}

// SetDestinatioTranslatedZoneExternalID sets "destinatioTranslatedZoneExternalID" field.
func (cef *CEF) SetDestinatioTranslatedZoneExternalID(v string) *CEF {
	if cef.destinatioTranslatedZoneExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.destinatioTranslatedZoneExternalID = v

	return cef
}

// SetDestinationTranslatedZoneURI sets "destinationTranslatedZoneURI" field.
func (cef *CEF) SetDestinationTranslatedZoneURI(v string) *CEF {
	if cef.destinationTranslatedZoneURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.destinationTranslatedZoneURI = v

	return cef
}

// SetDestinationZoneExternalID sets "destinationZoneExternalID" field.
func (cef *CEF) SetDestinationZoneExternalID(v string) *CEF {
	if cef.destinationZoneExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.destinationZoneExternalID = v

	return cef
}

// SetDestinationZoneURI sets "destinationZoneURI" field.
func (cef *CEF) SetDestinationZoneURI(v string) *CEF {
	if cef.destinationZoneURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.destinationZoneURI = v

	return cef
}

// SetDeviceTranslatedZoneExternalID sets "deviceTranslatedZoneExternalID" field.
func (cef *CEF) SetDeviceTranslatedZoneExternalID(v string) *CEF {
	if cef.deviceTranslatedZoneExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.deviceTranslatedZoneExternalID = v

	return cef
}

// SetDeviceTranslatedZoneURI sets "deviceTranslatedZoneURI" field.
func (cef *CEF) SetDeviceTranslatedZoneURI(v string) *CEF {
	if cef.deviceTranslatedZoneURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.deviceTranslatedZoneURI = v

	return cef
}

// SetDeviceZoneExternalID sets "deviceZoneExternalID" field.
func (cef *CEF) SetDeviceZoneExternalID(v string) *CEF {
	if cef.deviceZoneExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.deviceZoneExternalID = v

	return cef
}

// SetDeviceZoneURI sets "deviceZoneURI" field.
func (cef *CEF) SetDeviceZoneURI(v string) *CEF {
	if cef.deviceZoneURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.deviceZoneURI = v

	return cef
}

// SetDlat sets "dlat" field.
func (cef *CEF) SetDlat(v float64) *CEF {
	if cef.dlat != 0 {
		return cef
	}

	cef.dlat = v

	return cef
}

// SetDlong sets "dlong" field.
func (cef *CEF) SetDlong(v float64) *CEF {
	if cef.dlong != 0 {
		return cef
	}

	cef.dlong = v

	return cef
}

// SetEventID sets "eventID" field.
func (cef *CEF) SetEventID(v int64) *CEF {
	if cef.eventID != 0 {
		return cef
	}

	cef.eventID = v

	return cef
}

// SetRawEvent sets "rawEvent" field.
func (cef *CEF) SetRawEvent(v string) *CEF {
	if cef.rawEvent != "" {
		return cef
	}

	if len(v) > 4000 {
		v = v[:4000]
	}

	cef.rawEvent = v

	return cef
}

// SetSlat sets "slat" field.
func (cef *CEF) SetSlat(v float64) *CEF {
	if cef.slat != 0 {
		return cef
	}

	cef.slat = v

	return cef
}

// SetSlong sets "slong" field.
func (cef *CEF) SetSlong(v float64) *CEF {
	if cef.slong != 0 {
		return cef
	}

	cef.slong = v

	return cef
}

// SetSourceTranslatedZoneExternalID sets "sourceTranslatedZoneExternalID" field.
func (cef *CEF) SetSourceTranslatedZoneExternalID(v string) *CEF {
	if cef.sourceTranslatedZoneExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.sourceTranslatedZoneExternalID = v

	return cef
}

// SetSourceTranslatedZoneURI sets "sourceTranslatedZoneURI" field.
func (cef *CEF) SetSourceTranslatedZoneURI(v string) *CEF {
	if cef.sourceTranslatedZoneURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.sourceTranslatedZoneURI = v

	return cef
}

// SetSourceZoneExternalID sets "sourceZoneExternalID" field.
func (cef *CEF) SetSourceZoneExternalID(v string) *CEF {
	if cef.sourceZoneExternalID != "" {
		return cef
	}

	if len(v) > 200 {
		v = v[:200]
	}

	cef.sourceZoneExternalID = v

	return cef
}

// SetSourceZoneURI sets "sourceZoneURI" field.
func (cef *CEF) SetSourceZoneURI(v string) *CEF {
	if cef.sourceZoneURI != "" {
		return cef
	}

	if len(v) > 2048 {
		v = v[:2048]
	}

	cef.sourceZoneURI = v

	return cef
}

// SetAgentTranslatedZoneKey sets "agentTranslatedZoneKey" field.
func (cef *CEF) SetAgentTranslatedZoneKey(v int64) *CEF {
	if cef.agentTranslatedZoneKey != 0 {
		return cef
	}

	cef.agentTranslatedZoneKey = v

	return cef
}

// SetAgentZoneKey sets "agentZoneKey" field.
func (cef *CEF) SetAgentZoneKey(v int64) *CEF {
	if cef.agentZoneKey != 0 {
		return cef
	}

	cef.agentZoneKey = v

	return cef
}

// SetCustomerKey sets "customerKey" field.
func (cef *CEF) SetCustomerKey(v int64) *CEF {
	if cef.customerKey != 0 {
		return cef
	}

	cef.customerKey = v

	return cef
}

// SetDestinationTranslatedZoneKey sets "destinationTranslatedZoneKey" field.
func (cef *CEF) SetDestinationTranslatedZoneKey(v int64) *CEF {
	if cef.destinationTranslatedZoneKey != 0 {
		return cef
	}

	cef.destinationTranslatedZoneKey = v

	return cef
}

// SetDZoneKey sets "dZoneKey" field.
func (cef *CEF) SetDZoneKey(v int64) *CEF {
	if cef.dZoneKey != 0 {
		return cef
	}

	cef.dZoneKey = v

	return cef
}

// SetDeviceTranslatedZoneKey sets "deviceTranslatedZoneKey" field.
func (cef *CEF) SetDeviceTranslatedZoneKey(v int64) *CEF {
	if cef.deviceTranslatedZoneKey != 0 {
		return cef
	}

	cef.deviceTranslatedZoneKey = v

	return cef
}

// SetDeviceZoneKey sets "deviceZoneKey" field.
func (cef *CEF) SetDeviceZoneKey(v int64) *CEF {
	if cef.deviceZoneKey != 0 {
		return cef
	}

	cef.deviceZoneKey = v

	return cef
}

// SetSTranslatedZoneKey sets "sTranslatedZoneKey" field.
func (cef *CEF) SetSTranslatedZoneKey(v int64) *CEF {
	if cef.sTranslatedZoneKey != 0 {
		return cef
	}

	cef.sTranslatedZoneKey = v

	return cef
}

// SetSZoneKey sets "sZoneKey" field.
func (cef *CEF) SetSZoneKey(v int64) *CEF {
	if cef.sZoneKey != 0 {
		return cef
	}

	cef.sZoneKey = v

	return cef
}

// Action taken by the device.
func (cef *CEF) Act() string {
	return cef.act
}

// Application level protocol, example: HTTP, HTTPS, SSHv2, Telnet, POP, IMPA, IMAPS, and so on.
func (cef *CEF) App() string {
	return cef.app
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (cef *CEF) C6a1() net.IP {
	return cef.c6a1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) C6a1Label() string {
	return cef.c6a1Label
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (cef *CEF) C6a3() net.IP {
	return cef.c6a3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) C6a3Label() string {
	return cef.c6a3Label
}

// One of the four IPv6 address fields available to map fields that do not apply to any other in this dictionary. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (cef *CEF) C6a4() net.IP {
	return cef.c6a4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) C6a4Label() string {
	return cef.c6a4Label
}

// Represents the category assigned by the originating device. Devices often use their own categorization schema to classify event. Example: “/Monitor/Disk/Read”
func (cef *CEF) Cat() string {
	return cef.cat
}

// One of our floating point fields available to map fields that do not apply to any other in this dictionary.
func (cef *CEF) Cfp1() float32 {
	return cef.cfp1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cfp1Label() string {
	return cef.cfp1Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (cef *CEF) Cfp2() float32 {
	return cef.cfp2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cfp2Label() string {
	return cef.cfp2Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (cef *CEF) Cfp3() float32 {
	return cef.cfp3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cfp3Label() string {
	return cef.cfp3Label
}

// One of the four floating point fields available to map fields that do not apply to any other in this dictionary.
func (cef *CEF) Cfp4() float32 {
	return cef.cfp4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cfp4Label() string {
	return cef.cfp4Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (cef *CEF) Cn1() int64 {
	return cef.cn1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cn1Label() string {
	return cef.cn1Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (cef *CEF) Cn2() int64 {
	return cef.cn2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field. Implementing ArcSight Common Event Format (CEF) - Version 26 ArcS
func (cef *CEF) Cn2Label() string {
	return cef.cn2Label
}

// One of the three number fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible.
func (cef *CEF) Cn3() int64 {
	return cef.cn3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cn3Label() string {
	return cef.cn3Label
}

// A count associated with this event. How many times was this same event observed? Count can be omitted if it is 1.
func (cef *CEF) Cnt() int {
	return cef.cnt
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
func (cef *CEF) Cs1() string {
	return cef.cs1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cs1Label() string {
	return cef.cs1Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (cef *CEF) Cs2() string {
	return cef.cs2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
func (cef *CEF) Cs2Label() string {
	return cef.cs2Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions.
func (cef *CEF) Cs3() string {
	return cef.cs3
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cs3Label() string {
	return cef.cs3Label
}

// One of the six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions
func (cef *CEF) Cs4() string {
	return cef.cs4
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cs4Label() string {
	return cef.cs4Label
}

// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (cef *CEF) Cs5() string {
	return cef.cs5
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field
func (cef *CEF) Cs5Label() string {
	return cef.cs5Label
}

// One of six strings available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (cef *CEF) Cs6() string {
	return cef.cs6
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) Cs6Label() string {
	return cef.cs6Label
}

// The DNS domain part of the complete fully qualified domain name (FQDN).
func (cef *CEF) DestinationDNSDomain() string {
	return cef.destinationDNSDomain
}

// The service targeted by this event. Example: “sshd”
func (cef *CEF) DestinationServiceName() string {
	return cef.destinationServiceName
}

// Identifies the translated destination that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (cef *CEF) DestinationTranslatedAddress() net.IP {
	return cef.destinationTranslatedAddress
}

// Port after it was translated; for example, a firewall. Valid port numbers are 0 to 65535
func (cef *CEF) DestinationTranslatedPort() int {
	return cef.destinationTranslatedPort
}

// One of two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP : For tips on using these fields, see the guidelines defined under User- Defined Extensions.
func (cef *CEF) DeviceCustomDate1() string {
	return cef.deviceCustomDate1
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) DeviceCustomDate1Label() string {
	return cef.deviceCustomDate1Label
}

// One of the two timestamp fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. TIP: For tips on using these fields, see the guidelines defined under User-Defined Extensions
func (cef *CEF) DeviceCustomDate2() string {
	return cef.deviceCustomDate2
}

// All custom fields have a corresponding label field. Each of these fields is a string and describes the purpose of the custom field.
func (cef *CEF) DeviceCustomDate2Label() string {
	return cef.deviceCustomDate2Label
}

// Any information about what direction the observed communication has taken. The following values are supported: “0” for inbound or “1” for outbound
func (cef *CEF) DeviceDirection() int {
	return cef.deviceDirection
}

// The DNS domain part of the complete fully qualified domain name (FQDN).
func (cef *CEF) DeviceDNSDomain() string {
	return cef.deviceDNSDomain
}

// A name that uniquely identifies the device generating this event.
func (cef *CEF) DeviceExternalID() string {
	return cef.deviceExternalID
}

// The facility generating this event. For example, Syslog has an explicit facility associated with every event.
func (cef *CEF) DeviceFacility() string {
	return cef.deviceFacility
}

// Interface on which the packet or data entered the device.
func (cef *CEF) DeviceInboundInterface() string {
	return cef.deviceInboundInterface
}

// The Windows domain name of the device address.
func (cef *CEF) DeviceNtDomain() string {
	return cef.deviceNtDomain
}

// Interface on which the packet or data left the device
func (cef *CEF) DeviceOutboundInterface() string {
	return cef.deviceOutboundInterface
}

// Unique identifier for the payload associated with the event.
func (cef *CEF) DevicePayloadID() string {
	return cef.devicePayloadID
}

// Process name associated with the event. An example might be the process generating the syslog entry in UNIX.
func (cef *CEF) DeviceProcessName() string {
	return cef.deviceProcessName
}

// Identifies the translated device address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (cef *CEF) DeviceTranslatedAddress() net.IP {
	return cef.deviceTranslatedAddress
}

// Identifies the destination that an event refers to in an IP network. The format must be a fully qualified domain name (FQDN) associated with the destination node, when a node is available. Examples: “host.domain.com” or “host”.
func (cef *CEF) DHost() string {
	return cef.dhost
}

// The Windows domain name of the destination address.
func (cef *CEF) Dntdom() string {
	return cef.dntdom
}

// Provides the ID of the destination process associated with the event. For example, if an event contains process ID 105, “105” is the process ID
func (cef *CEF) DPID() int {
	return cef.dpid
}

// The typical values are “Administrator”, “User”, and “Guest”. This identifies the destination user’s privileges. In UNIX, for example, activity executed on the root user would be identified with destinationUser Privileges of “Administrator”.
func (cef *CEF) Dpriv() string {
	return cef.dpriv
}

// The name of the event’s destination process. Example: “telnetd” or “sshd”.
func (cef *CEF) Dproc() string {
	return cef.dproc
}

// The valid port numbers are between 0 and 65535.
func (cef *CEF) Dpt() int {
	return cef.dpt
}

// Identifies the destination address that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”
func (cef *CEF) Dst() net.IP {
	return cef.dst
}

// The timezone for the device generating the event.
func (cef *CEF) Dtz() string {
	return cef.dtz
}

// Identifies the destination user by ID. For example, in UNIX, the root user is generally associated with user ID 0
func (cef *CEF) Duid() string {
	return cef.duid
}

// Identifies the destination user by name. This is the user associated with the event’s destination. Email addresses are often mapped into the UserName fields. The recipient is a candidate to put into this field.
func (cef *CEF) Duser() string {
	return cef.duser
}

// Identifies the device address that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
func (cef *CEF) Dvc() net.IP {
	return cef.dvc
}

// The format should be a fully qualified domain name (FQDN) associated with the device node, when a node is available. Example: “host.domain.com” or “host”.
func (cef *CEF) Dvchost() string {
	return cef.dvchost
}

// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
func (cef *CEF) Dvcmac() net.HardwareAddr {
	return cef.dvcmac
}

// Provides the ID of the process on the device generating the event.
func (cef *CEF) Dvcpid() int {
	return cef.dvcpid
}

// The time at which the activity related to the event ended. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st1970). An example would be reporting the end of a session.
func (cef *CEF) End() string {
	return cef.end
}

// The ID used by an originating device. They are usually increasing numbers, associated with events.
func (cef *CEF) ExternalID() string {
	return cef.externalID
}

// Time when the file was created.
func (cef *CEF) FileCreateTime() string {
	return cef.fileCreateTime
}

// Hash of a file.
func (cef *CEF) FileHash() string {
	return cef.fileHash
}

// An ID associated with a file could be the inode.
func (cef *CEF) FileID() string {
	return cef.fileID
}

// Time when the file was last modified.
func (cef *CEF) FileModificationTime() string {
	return cef.fileModificationTime
}

// Full path to the file, including file name itself. Example: C:\Program Files \WindowsNT\Access ories\ wordpad.exe or /usr/bin/zip
func (cef *CEF) FilePath() string {
	return cef.filePath
}

// Permissions of the file.
func (cef *CEF) FilePermission() string {
	return cef.filePermission
}

// Type of file (pipe, socket, etc.)
func (cef *CEF) FileType() string {
	return cef.fileType
}

// A timestamp field available to map a timestamp that does not apply to any other defined timestamp field in this dictionary. Use all flex fields sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
func (cef *CEF) FlexDate1() string {
	return cef.flexDate1
}

// The label field is a string and describes the purpose of the flex field.
func (cef *CEF) FlexDate1Label() string {
	return cef.flexDate1Label
}

// One of four floating point fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
func (cef *CEF) FlexString1() string {
	return cef.flexString1
}

// The label field is a string and describes the purpose of the flex field
func (cef *CEF) FlexString1Label() string {
	return cef.flexString1Label
}

// One of four floating point fields available to map fields that do not apply to any other in this dictionary. Use sparingly and seek a more specific, dictionary supplied field when possible. These fields are typically reserved for customer use and should not be set by vendors unless necessary.
func (cef *CEF) FlexString2() string {
	return cef.flexString2
}

// The label field is a string and describes the purpose of the flex field.
func (cef *CEF) FlexString2Label() string {
	return cef.flexString2Label
}

// Name of the file only (without its path).
func (cef *CEF) Fname() string {
	return cef.fname
}

// Size of the file.
func (cef *CEF) Fsize() int64 {
	return cef.fsize
}

// Number of bytes transferred inbound, relative to the source to destination relationship, meaning that data was flowing from source to destination.
func (cef *CEF) In() int64 {
	return cef.in
}

// An arbitrary message giving more details about the event. Multi-line entries can be produced by using \n as the new line separator.
func (cef *CEF) Msg() string {
	return cef.msg
}

// Time when old file was created.
func (cef *CEF) OldFileCreateTime() string {
	return cef.oldFileCreateTime
}

// Hash of the old file
func (cef *CEF) OldFileHash() string {
	return cef.oldFileHash
}

// An ID associated with the old file could be the inode.
func (cef *CEF) OldFileID() string {
	return cef.oldFileID
}

// Time when old file was last modified.
func (cef *CEF) OldFileModificationTime() string {
	return cef.oldFileModificationTime
}

// Name of the old file.
func (cef *CEF) OldFileName() string {
	return cef.oldFileName
}

// Full path to the old file, including the file name itself. Examples: c:\Program Files\ WindowsNT\Accesso ries \wordpad.exe or /usr/bin/zip
func (cef *CEF) OldFilePath() string {
	return cef.oldFilePath
}

// Permissions of the old file.
func (cef *CEF) OldFilePermission() string {
	return cef.oldFilePermission
}

// Size of the old file.
func (cef *CEF) OldFileSize() int64 {
	return cef.oldFileSize
}

// Type of the old file (pipe, socket, etc.)
func (cef *CEF) OldFileType() string {
	return cef.oldFileType
}

// Number of bytes transferred outbound relative to the source to destination relationship. For example, the byte number of data flowing from the destination to the source.
func (cef *CEF) Out() int {
	return cef.out
}

// Displays the outcome, usually as ‘success’ or ‘failure’.
func (cef *CEF) Outcome() string {
	return cef.outcome
}

// Identifies the Layer-4 protocol used. The possible values are protocols such as TCP or UDP
func (cef *CEF) Proto() string {
	return cef.proto
}

// The reason an audit event was generated. For example “badd password” or “unknown user”. This could also be an error or return code. Example: “0x1234”
func (cef *CEF) Reason() string {
	return cef.reason
}

// In the case of an HTTP request, this field contains the URL accessed. The URL should contain the protocol as well. Example: “http://www/secure. com”
func (cef *CEF) Request() string {
	return cef.request
}

// The User-Agent associated with the request.
func (cef *CEF) RequestClientApplication() string {
	return cef.requestClientApplication
}

// Description of the content from which the request originated (for example, HTTP Referrer)
func (cef *CEF) RequestContext() string {
	return cef.requestContext
}

// Cookies associated with the request.
func (cef *CEF) RequestCookies() string {
	return cef.requestCookies
}

// The method used to access a URL. Possible values: “POST”, “GET”, etc.
func (cef *CEF) RequestMethod() string {
	return cef.requestMethod
}

// The time at which the event related to the activity was received. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st 1970)
func (cef *CEF) Rt() string {
	return cef.rt
}

// Identifies the source that an event refers to in an IP network. The format should be a fully qualified domain name (FQDN) associated with the source node, when a mode is available. Examples: “host” or “host.domain.com”.
func (cef *CEF) Shost() string {
	return cef.shost
}

// Six colon-separated hexadecimal numbers. Example: “00:0D:60:AF:1B:61”
func (cef *CEF) Smac() net.HardwareAddr {
	return cef.smac
}

// The Windows domain name for the source address.
func (cef *CEF) Sntdom() string {
	return cef.sntdom
}

// The DNS domain part of the complete fully qualified domain name (FQDN).
func (cef *CEF) SourceDNSDomain() string {
	return cef.sourceDNSDomain
}

// The service that is responsible for generating this event.
func (cef *CEF) SourceServiceName() string {
	return cef.sourceServiceName
}

// Identifies the translated source that the event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
func (cef *CEF) SourceTranslatedAddress() net.IP {
	return cef.sourceTranslatedAddress
}

// A port number after being translated by, for example, a firewall. Valid port numbers are 0 to 65535.
func (cef *CEF) SourceTranslatedPort() int {
	return cef.sourceTranslatedPort
}

// The ID of the source process associated with the event
func (cef *CEF) Spid() int {
	return cef.spid
}

// The typical values are “Administrator”, “User”, and “Guest”. It identifies the source user’s privileges. In UNIX, for example, activity executed by the root user would be identified with “Administrator”.
func (cef *CEF) Spriv() string {
	return cef.spriv
}

// The name of the event’s source process.
func (cef *CEF) Sproc() string {
	return cef.sproc
}

// The valid port numbers are 0 to 65535.
func (cef *CEF) Spt() int {
	return cef.spt
}

// Identifies the source that an event refers to in an IP network. The format is an IPv4 address. Example: “192.168.10.1”.
func (cef *CEF) Src() net.IP {
	return cef.src
}

// The time when the activity the event referred to started. The format is MMM dd yyyy HH:mm:ss or milliseconds since epoch (Jan 1st 1970)
func (cef *CEF) Start() string {
	return cef.start
}

// Identifies the source user by ID. This is the user associated with the source of the event. For example, in UNIX, the root user is generally associated with user ID 0.
func (cef *CEF) Suid() string {
	return cef.suid
}

// Identifies the source user by name. Email addresses are also mapped into the UserName fields. The sender is a candidate to put into this field.
func (cef *CEF) Suser() string {
	return cef.suser
}

// 0 means base event, 1 means aggregated, 2 means correlation, and 3 means action. This field can be omitted for base events (type 0)
func (cef *CEF) Type() int {
	return cef.typ
}

// The DNS domain name of the ArcSight connector that processed the event.
func (cef *CEF) AgentDNSDomain() string {
	return cef.agentDNSDomain
}

func (cef *CEF) AgentNtDomain() string {
	return cef.agentNtDomain
}

func (cef *CEF) AgentTranslatedAddress() net.IP {
	return cef.agentTranslatedAddress
}

func (cef *CEF) AgentTranslatedZoneExternalID() string {
	return cef.agentTranslatedZoneExternalID
}

func (cef *CEF) AgentTranslatedZoneURI() string {
	return cef.agentTranslatedZoneURI
}

func (cef *CEF) AgentZoneExternalID() string {
	return cef.agentZoneExternalID
}

func (cef *CEF) AgentZoneURI() string {
	return cef.agentZoneURI
}

// The IP address of the ArcSight connector that processed the event.
func (cef *CEF) Agt() net.IP {
	return cef.agt
}

// The hostname of the ArcSight connector that processed the event.
func (cef *CEF) Ahost() string {
	return cef.ahost
}

// The agent ID of the ArcSight connector that processed the event.
func (cef *CEF) Aid() string {
	return cef.aid
}

// The MAC address of the ArcSight connector that processed the event.
func (cef *CEF) Amac() net.HardwareAddr {
	return cef.amac
}

// The time at which information about the event was received by the ArcSight connector.
func (cef *CEF) Art() string {
	return cef.art
}

// The agent type of the ArcSight connector that processed the event
func (cef *CEF) At() string {
	return cef.at
}

// The agent time zone of the ArcSight connector that processed the event.
func (cef *CEF) Atz() string {
	return cef.atz
}

// The version of the ArcSight connector that processed the event.
func (cef *CEF) Av() string {
	return cef.av
}

func (cef *CEF) CustomerExternalID() string {
	return cef.customerExternalID
}

func (cef *CEF) CustomerURI() string {
	return cef.customerURI
}

func (cef *CEF) DestinatioTranslatedZoneExternalID() string {
	return cef.destinatioTranslatedZoneExternalID
}

// The URI for the Translated Zone that the destination asset has been assigned to in ArcSight.
func (cef *CEF) DestinationTranslatedZoneURI() string {
	return cef.destinationTranslatedZoneURI
}

func (cef *CEF) DestinationZoneExternalID() string {
	return cef.destinationZoneExternalID
}

// The URI for the Zone that the destination asset has been assigned to in ArcSight.
func (cef *CEF) DestinationZoneURI() string {
	return cef.destinationZoneURI
}

func (cef *CEF) DeviceTranslatedZoneExternalID() string {
	return cef.deviceTranslatedZoneExternalID
}

// The URI for the Translated Zone that the device asset has been assigned to in ArcSight.
func (cef *CEF) DeviceTranslatedZoneURI() string {
	return cef.deviceTranslatedZoneURI
}

func (cef *CEF) DeviceZoneExternalID() string {
	return cef.deviceZoneExternalID
}

// Thee URI for the Zone that the device asset has been assigned to in ArcSight.
func (cef *CEF) DeviceZoneURI() string {
	return cef.deviceZoneURI
}

// The latitudinal value from which the destination’s IP address belongs.
func (cef *CEF) Dlat() float64 {
	return cef.dlat
}

// The longitudinal value from which the destination’s IP address belongs.
func (cef *CEF) Dlong() float64 {
	return cef.dlong
}

// This is a unique ID that ArcSight assigns to each event.
func (cef *CEF) EventID() int64 {
	return cef.eventID
}

func (cef *CEF) RawEvent() string {
	return cef.rawEvent
}

func (cef *CEF) Slat() float64 {
	return cef.slat
}

func (cef *CEF) Slong() float64 {
	return cef.slong
}

func (cef *CEF) SourceTranslatedZoneExternalID() string {
	return cef.sourceTranslatedZoneExternalID
}

// The URI for the Translated Zone that the destination asset has been assigned to in ArcSight.
func (cef *CEF) SourceTranslatedZoneURI() string {
	return cef.sourceTranslatedZoneURI
}

func (cef *CEF) SourceZoneExternalID() string {
	return cef.sourceZoneExternalID
}

// The URI for the Zone that the source asset has been assigned to in ArcSight.
func (cef *CEF) SourceZoneURI() string {
	return cef.sourceZoneURI
}

// ID of an agentTranslatedZone resource reference.
func (cef *CEF) AgentTranslatedZoneKey() int64 {
	return cef.agentTranslatedZoneKey
}

// ID of an agentZone resource reference.
func (cef *CEF) AgentZoneKey() int64 {
	return cef.agentZoneKey
}

// ID of a customer resource reference.
func (cef *CEF) CustomerKey() int64 {
	return cef.customerKey
}

// ID of a destinationTranslate dZone resource reference.
func (cef *CEF) DestinationTranslatedZoneKey() int64 {
	return cef.destinationTranslatedZoneKey
}

// ID of a destinationZone resource reference.
func (cef *CEF) DZoneKey() int64 {
	return cef.dZoneKey
}

// ID of a deviceTranslatedZone resource reference.
func (cef *CEF) DeviceTranslatedZoneKey() int64 {
	return cef.deviceTranslatedZoneKey
}

// ID of a deviceZone resource reference.
func (cef *CEF) DeviceZoneKey() int64 {
	return cef.deviceZoneKey
}

// ID of a sourceTranslatedZon e resource reference.
func (cef *CEF) STranslatedZoneKey() int64 {
	return cef.sTranslatedZoneKey
}

// ID of a sourceZone resource reference
func (cef *CEF) SZoneKey() int64 {
	return cef.sZoneKey
}
