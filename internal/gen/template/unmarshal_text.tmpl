{{ template "header" $ }}

import (
	"bytes"
	"errors"
	"net"
	"strconv"
	"strings"
)

var ErrNumHeaderFields = errors.New("number of header fields less than {{ .HeaderFieldsNum }}")

func (cef *CEF) UnmarshalText(text []byte) (err error) {
    defer func() {
		cef.err = err
	}()

	ss := bytes.Split(text, []byte("|"))
	if len(ss) < headerFieldsNum {
		return ErrNumHeaderFields
	}

	hasExtension := bytes.ContainsRune(ss[len(ss)-1], '=')
	if len(ss) == headerFieldsNum && hasExtension {
		return ErrNumHeaderFields
	}

	cefVer, err := mkCEFVersion(ss[0])
	if err != nil {
		return err
	}
	cef.SetCEFVersion(cefVer)
	deviceVendor := string(ss[1])
	cef.SetDeviceVendor(deviceVendor)
	deviceProduct := string(ss[2])
	cef.SetDeviceProduct(deviceProduct)
	deviceVersion := string(ss[3])
	cef.SetDeviceVersion(deviceVersion)
	deviceEventClassID := string(ss[4])
	cef.SetDeviceEventClassId(deviceEventClassID)
	name := string(ss[5])
	cef.SetName(name)
	agentSeverity, err := strconv.Atoi(string(ss[6]))
	if err != nil {
		return err
	}
	cef.SetAgentSeverity(AgentSeverity(agentSeverity))

	if len(ss) == headerFieldsNum {
		return nil
	}

	c := mkCollection(ss[7])

    for _, kv := range c {
        ss := strings.Split(kv, "=")

        key := ss[0]
        val := ss[1]

        if serr := cef.set(key, val); serr != nil {
            return serr
        }
    }

	return nil
}

func (cef *CEF) set(key string, val string) error {
    switch key {
{{- range .ExtensionFields }}
    case "{{ .CEFKeyName }}":
    {{- if eq .DataType "String" }}
    cef.Set{{ .CEFKeyName | trimAllSpaces | title }}(val)
    {{ else if eq .DataType "IP Address" }}
    cef.Set{{ .CEFKeyName | trimAllSpaces | title }}(net.ParseIP(val))
    {{ else if eq .DataType "IPv6 address" }}
    cef.Set{{ .CEFKeyName | trimAllSpaces | title }}(net.ParseIP(val))
    {{ else if eq .DataType "IPv6 Address" }}
    cef.Set{{ .CEFKeyName | trimAllSpaces | title }}(net.ParseIP(val))
    {{ else if eq .DataType "Floating Point" }}
    {{ .CEFKeyName | trimAllSpaces }}, err := strconv.ParseFloat(val, 64)
    if err != nil {
        return err
    }
    cef.Set{{ .CEFKeyName | trimAllSpaces | title }}({{ .CEFKeyName | trimAllSpaces }})
    {{ else if eq .DataType "Long" }}
    {{ .CEFKeyName | trimAllSpaces }}, err := strconv.ParseInt(val, 10, 64)
    if err != nil {
        return err
    }
    cef.Set{{ .CEFKeyName | trimAllSpaces | title }}({{ .CEFKeyName | trimAllSpaces }})
    {{ else if eq .DataType "Integer" }}
    {{ .CEFKeyName | trimAllSpaces }}, err := strconv.Atoi(val)
    if err != nil {
        return err
    }
    cef.Set{{ .CEFKeyName | trimAllSpaces | title }}({{ .CEFKeyName | trimAllSpaces }})
    {{ else if eq .DataType "Time Stamp" }}
    cef.Set{{ .CEFKeyName | trimAllSpaces | title }}(val)
    {{ end }}
{{- end }}
    default:
    }

    return nil
}
