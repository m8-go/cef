{{ template "header" $ }}

import (
	"errors"
	"net"
	"strconv"
)

func (cef *CEF) set(key string, val string) error {
    switch key {
{{- range .ExtensionFields }}
    case "{{ .CEFKeyName }}":
    {{- if eq .DataType "String" }}
    cef.Set{{ .CEFKeyName | title | pretty }}(val)
    {{ else if eq .DataType "IP Address" }}
    cef.Set{{ .CEFKeyName | title }}(net.ParseIP(val))
    {{ else if eq .DataType "IPv6 address" }}
    cef.Set{{ .CEFKeyName | title }}(net.ParseIP(val))
    {{ else if eq .DataType "IPv6 Address" }}
    cef.Set{{ .CEFKeyName | title }}(net.ParseIP(val))
    {{ else if eq .DataType "Floating Point" }}
    {{ .CEFKeyName }}, err := strconv.ParseFloat(val, 32)
    if err != nil {
        return errors.Join(err, ErrBadExtension)
    }

    cef.Set{{ .CEFKeyName | title }}(float32({{ .CEFKeyName }}))
    {{ else if eq .DataType "Long" }}
    {{ .CEFKeyName | pretty }}, err := strconv.ParseInt(val, 10, 64)
    if err != nil {
        return errors.Join(err, ErrBadExtension)
    }

    cef.Set{{ .CEFKeyName | title | pretty }}({{ .CEFKeyName | pretty }})
    {{ else if eq .DataType "Integer" }}
    {{ .CEFKeyName | renameKeyWord }}, err := strconv.Atoi(val)
    if err != nil {
        return errors.Join(err, ErrBadExtension)
    }

    cef.Set{{ .CEFKeyName | title }}({{ .CEFKeyName | renameKeyWord }})
    {{ else if eq .DataType "Time Stamp" }}
    cef.Set{{ .CEFKeyName | title }}(val)
    {{ else if eq .DataType "MAC Address" }}
    {{ .CEFKeyName }}, err := net.ParseMAC(val)
    if err != nil {
        return errors.Join(err, ErrBadExtension)
    }

    cef.Set{{ .CEFKeyName | title }}({{ .CEFKeyName }})
    {{ else if eq .DataType "Double" }}
    {{ .CEFKeyName }}, err := strconv.ParseFloat(val, 64)
    if err != nil {
        return errors.Join(err, ErrBadExtension)
    }

    cef.Set{{ .CEFKeyName | title }}({{ .CEFKeyName }})
    {{ end }}
{{- end }}
    default:
    }

    return nil
}
