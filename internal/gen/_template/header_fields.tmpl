{{ template "header" $ }}

const headerFieldsNum = {{ .FieldsNum }}

type headerFields struct{
{{- range .Fields }}
// {{ .Description }}
{{ .FieldName | unexported }} {{ typeMapping .Typ }}
{{- end }}
}

{{ range .Fields }}
// Set{{ .FieldName | title | pretty }} sets {{ .FieldName | unexported | quote }} field.
func (cef *CEF) Set{{ .FieldName | title | pretty }}(v {{ typeMapping .Typ }}) *CEF {
{{- if ne .Size "N/A" }}
    if len(v) > {{ .Size }} {
        v = v[:{{ .Size }}]
    }
{{ end }}
{{- if eq .FieldName "CEF Version" }}
    if v < 0 {
        v = 0
    } else if v > 1 {
        v = 1
    }
{{ else if eq .FieldName "agentSeverity" }}
    if v < 0 {
        v = 0
    } else if v > 10 {
        v = 10
    }
{{ end }}
{{- if eq .Typ "Numeric" }}
    if cef.{{ .FieldName | unexported | renameKeyWord }} != 0 {
        return cef
    }
{{ else if eq .Typ "AgentSeverityEnumeration" }}
    if cef.{{ .FieldName | unexported | renameKeyWord }} != 0 {
        return cef
    }
{{ else if eq .Typ "String" }}
    if cef.{{ .FieldName | unexported | renameKeyWord }} != "" {
        return cef
    }
{{ else }}
    if cef.{{ .FieldName | unexported | renameKeyWord }} != "" {
        return cef
    }
{{ end }}
{{ if eq .Typ "String" }}
    cef.{{ .FieldName | unexported }} = escapeHeaderField(v)
{{ else }}
    cef.{{ .FieldName | unexported }} = v
{{ end }}

    return cef
}
{{ end }}

{{ range .Fields }}
// {{ .Description }}
func (cef *CEF) {{ .FieldName | title | pretty }}() {{ typeMapping .Typ }} {
    return cef.{{ .FieldName | unexported }}
}
{{ end }}